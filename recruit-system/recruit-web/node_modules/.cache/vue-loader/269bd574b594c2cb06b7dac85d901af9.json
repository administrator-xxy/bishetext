{"remainingRequest":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\src\\view\\position\\position-detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\src\\view\\position\\position-detail.vue","mtime":1656036094000},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677772052210},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1677771858682},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677772052210},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1677772060461}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport { Position } from '@/model/position'\nimport { Application } from '@/model/application'\nimport { Resume } from '@/model/resume'\nimport { Favor } from '@/model/favor'\nimport router from '../../router'\n\nexport default {\n  // 定义变量\n  props: {\n    // 子组件定义的变量通过父组件赋值\n    detailPositionID: {\n      type: Number,\n    },\n    flag: {\n      type: Boolean,\n      default: true,\n    },\n    temp: {\n      type: Number,\n      default: 0,\n    },\n  },\n  data() {\n    return {\n      loading: false,\n      form: {\n      },\n      list: {\n        user_id: '',\n        position_id: '',\n        resume_id: '',\n        hr_id: '',\n        company_id: '',\n      },\n      collect: {\n      },\n    }\n  },\n  async mounted() {\n    this.loading = true\n    const res = await Position.getById(this.detailPositionID)\n    // 更新职位浏览量(每进入一次职位详情页面，职位浏览量加一)\n    await Position.updateHits(this.detailPositionID)\n    this.form = res\n    this.getInfo()\n    this.loading = false\n  },\n  methods: {\n    async handlePass(val) {\n      const res = await Position.updateState(this.detailPositionID, 1)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(`${res.message}`)\n        // 返回查询所有未审核职位的页面\n        this.$emit('detailClose')\n      }\n    },\n    async handleFail(val) {\n      const res = await Position.updateState(this.detailPositionID, 2)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(`${res.message}`)\n        // 返回查询所有未审核职位的页面\n        this.$emit('detailClose')\n      }\n    },\n    // 投递简历\n    async handleDelivery(val) {\n      if (this.$store.getters.user === null) {\n        this.$message.error(\"请注册登录后投递简历\")\n        return\n      }\n      // 根据用户id和职位id判断用户是否已经投递过该职位，避免重复投递\n      const flag = await Application.getByPositionIdAndUserId(this.detailPositionID, this.$store.getters.user.id)\n      if (flag === false) {\n        // 不能重复投递\n        this.$message.error(\"你已投递过该职位，不可重复投递\")\n      } else {\n        // 获取当前登录求职者的用户id\n        this.list.user_id = this.$store.getters.user.id\n        // 获取当前投递简历的职位id\n        this.list.position_id = this.detailPositionID\n        // 根据用户id查询绑定的简历id\n        const temp = await Resume.getByUserId(this.$store.getters.user.id)\n        this.list.resume_id = temp.resume_id\n        // 根据职位id查询该职位所对应的hr_id\n        const result = await Position.getById(this.detailPositionID)\n        this.list.hr_id = result.hr_id\n        this.list.company_id = result.company_id\n        // 调用创建申请的方法\n        const res = await Application.create(this.list)\n        if (res.code < window.MAX_SUCCESS_CODE) {\n          this.$message.success(`${res.message}`)\n        }\n      }\n    },\n    async getInfo() {\n      // 获取当前登录求职者的用户id\n      this.list.user_id = this.$store.getters.user.id\n      // 获取当前投递简历的职位id\n      this.list.position_id = this.detailPositionID\n      // 根据用户id查询绑定的简历id\n      const temp = await Resume.getByUserId(this.$store.getters.user.id)\n      this.list.resume_id = temp.id\n      // 根据职位id查询该职位所对应的hr_id\n      const result = await Position.getById(this.detailPositionID)\n      this.list.hr_id = result.hr_id\n      this.list.company_id = result.company_id\n    },\n    // 收藏职位\n    async handleCollect(val) {\n      if (this.$store.getters.user === null) {\n        this.$message.error(\"请注册登录后收藏职位\")\n        return\n      }\n      // 获取当前登录求职者的用户id\n      this.collect.user_id = this.$store.getters.user.id\n      // 获取当前收藏的职位id\n      this.collect.position_id = this.detailPositionID\n      // 调用添加收藏的方法\n      const res = await Favor.create(this.collect)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(`${res.message}`)\n      }\n    },\n    back() {\n      // this.$router.go(-1)\n      // 由于showEdit这个变量是在父组件定义的，因此不能在子组件改变该变量的值，可以使用事件传递的方式，当点击了返回按钮，触发的事件处理机制交给父组件去处理\n      this.$emit('detailClose')\n    },\n  },\n}\n",{"version":3,"sources":["position-detail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"position-detail.vue","sourceRoot":"src/view/position","sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"title\">\n      <span>职位详细信息</span>\n      <span class=\"back\" @click=\"back\">\n        <i class=\"iconfont icon-fanhui\"></i> 返回\n      </span>\n    </div>\n    <el-divider></el-divider>\n    <div class=\"wrap\">\n      <el-row>\n        <el-col :lg=\"16\" :md=\"20\" :sm=\"24\" :xs=\"24\">\n          <el-form :model=\"form\" status-icon ref=\"form\" label-width=\"100px\" v-loading=\"loading\" @submit.native.prevent>\n            <el-form-item label=\"职位名称\" prop=\"title\">\n              <span>{{ form.title }}</span>\n            </el-form-item>\n            <el-form-item label=\"所属分类\" prop=\"category_name\">\n              <span>{{ form.category_name }}</span>\n            </el-form-item>\n            <el-form-item label=\"职位浏览量\" prop=\"hits\">\n              <span>{{ form.hits }}</span>\n            </el-form-item>\n            <el-form-item label=\"招聘人数\" prop=\"quantity\">\n              <span>{{ form.quantity }}</span>\n            </el-form-item>\n            <el-form-item label=\"薪资\" prop=\"salary_up\">\n              <span>{{ form.salary_down }}~{{ form.salary_up }}</span>\n            </el-form-item>\n            <el-form-item label=\"工作地点\" prop=\"city\">\n              <span>{{ form.city }}</span>\n            </el-form-item>\n            <el-form-item label=\"职位要求\" prop=\"requirement\">\n              <span>{{ form.requirement }}</span>\n            </el-form-item>\n            <el-form-item label=\"公司名称\" prop=\"company_name\">\n              <span>{{ form.company_name }}</span>\n            </el-form-item>\n            <el-form-item label=\"公司简介\" prop=\"company_desc\">\n              <span>{{ form.company_desc }}</span>\n            </el-form-item>\n            <el-form-item class=\"submit\">\n              <!--通过职位的状态属性state来控制通过按钮和不通过按钮是否显示-->\n              <el-button type=\"primary\" @click=\"handlePass('form')\" v-if=\"form.state == 0 && flag\">通 过</el-button>\n              <el-button @click=\"handleFail('form')\" v-if=\"form.state == 0 && flag\">不通过</el-button>\n              <el-button type=\"primary\" @click=\"handleDelivery('form')\" v-if=\"temp == 1\">投递简历</el-button>\n              <el-button @click=\"handleCollect('form')\" v-if=\"temp == 1\">收藏职位</el-button>\n            </el-form-item>\n          </el-form>\n        </el-col>\n      </el-row>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Position } from '@/model/position'\nimport { Application } from '@/model/application'\nimport { Resume } from '@/model/resume'\nimport { Favor } from '@/model/favor'\nimport router from '../../router'\n\nexport default {\n  // 定义变量\n  props: {\n    // 子组件定义的变量通过父组件赋值\n    detailPositionID: {\n      type: Number,\n    },\n    flag: {\n      type: Boolean,\n      default: true,\n    },\n    temp: {\n      type: Number,\n      default: 0,\n    },\n  },\n  data() {\n    return {\n      loading: false,\n      form: {\n      },\n      list: {\n        user_id: '',\n        position_id: '',\n        resume_id: '',\n        hr_id: '',\n        company_id: '',\n      },\n      collect: {\n      },\n    }\n  },\n  async mounted() {\n    this.loading = true\n    const res = await Position.getById(this.detailPositionID)\n    // 更新职位浏览量(每进入一次职位详情页面，职位浏览量加一)\n    await Position.updateHits(this.detailPositionID)\n    this.form = res\n    this.getInfo()\n    this.loading = false\n  },\n  methods: {\n    async handlePass(val) {\n      const res = await Position.updateState(this.detailPositionID, 1)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(`${res.message}`)\n        // 返回查询所有未审核职位的页面\n        this.$emit('detailClose')\n      }\n    },\n    async handleFail(val) {\n      const res = await Position.updateState(this.detailPositionID, 2)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(`${res.message}`)\n        // 返回查询所有未审核职位的页面\n        this.$emit('detailClose')\n      }\n    },\n    // 投递简历\n    async handleDelivery(val) {\n      if (this.$store.getters.user === null) {\n        this.$message.error(\"请注册登录后投递简历\")\n        return\n      }\n      // 根据用户id和职位id判断用户是否已经投递过该职位，避免重复投递\n      const flag = await Application.getByPositionIdAndUserId(this.detailPositionID, this.$store.getters.user.id)\n      if (flag === false) {\n        // 不能重复投递\n        this.$message.error(\"你已投递过该职位，不可重复投递\")\n      } else {\n        // 获取当前登录求职者的用户id\n        this.list.user_id = this.$store.getters.user.id\n        // 获取当前投递简历的职位id\n        this.list.position_id = this.detailPositionID\n        // 根据用户id查询绑定的简历id\n        const temp = await Resume.getByUserId(this.$store.getters.user.id)\n        this.list.resume_id = temp.resume_id\n        // 根据职位id查询该职位所对应的hr_id\n        const result = await Position.getById(this.detailPositionID)\n        this.list.hr_id = result.hr_id\n        this.list.company_id = result.company_id\n        // 调用创建申请的方法\n        const res = await Application.create(this.list)\n        if (res.code < window.MAX_SUCCESS_CODE) {\n          this.$message.success(`${res.message}`)\n        }\n      }\n    },\n    async getInfo() {\n      // 获取当前登录求职者的用户id\n      this.list.user_id = this.$store.getters.user.id\n      // 获取当前投递简历的职位id\n      this.list.position_id = this.detailPositionID\n      // 根据用户id查询绑定的简历id\n      const temp = await Resume.getByUserId(this.$store.getters.user.id)\n      this.list.resume_id = temp.id\n      // 根据职位id查询该职位所对应的hr_id\n      const result = await Position.getById(this.detailPositionID)\n      this.list.hr_id = result.hr_id\n      this.list.company_id = result.company_id\n    },\n    // 收藏职位\n    async handleCollect(val) {\n      if (this.$store.getters.user === null) {\n        this.$message.error(\"请注册登录后收藏职位\")\n        return\n      }\n      // 获取当前登录求职者的用户id\n      this.collect.user_id = this.$store.getters.user.id\n      // 获取当前收藏的职位id\n      this.collect.position_id = this.detailPositionID\n      // 调用添加收藏的方法\n      const res = await Favor.create(this.collect)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(`${res.message}`)\n      }\n    },\n    back() {\n      // this.$router.go(-1)\n      // 由于showEdit这个变量是在父组件定义的，因此不能在子组件改变该变量的值，可以使用事件传递的方式，当点击了返回按钮，触发的事件处理机制交给父组件去处理\n      this.$emit('detailClose')\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.el-divider--horizontal {\n  margin: 0;\n}\n\n.container {\n  text-align: left;\n\n  .title {\n    height: 59px;\n    line-height: 59px;\n    color: $parent-title-color;\n    font-size: 16px;\n    font-weight: 500;\n    text-indent: 40px;\n\n    .back {\n      float: right;\n      margin-right: 40px;\n      cursor: pointer;\n    }\n  }\n\n  .wrap {\n    padding: 20px;\n  }\n\n  .submit {\n    float: left;\n  }\n}\n</style>\n"]}]}