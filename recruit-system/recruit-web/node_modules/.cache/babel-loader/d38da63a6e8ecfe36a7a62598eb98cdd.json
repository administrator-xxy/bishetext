{"remainingRequest":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\src\\view\\admin\\user\\user-password.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\src\\view\\admin\\user\\user-password.vue","mtime":1656036094000},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\babel.config.js","mtime":1656036094000},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677772052210},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1677771858682},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677772052210},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1677772060461}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"C:\\\\Users\\\\Hacker\\\\Desktop\\\\zhaop\\\\resume-master\\\\resume-master\\\\recruit-system\\\\recruit-web\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Admin from '@/lin/model/admin';\nexport default {\n  props: ['id'],\n  data: function data() {\n    var _this = this;\n\n    var validatePassword = function validatePassword(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('请输入密码'));\n      } else if (value.length < 6) {\n        callback(new Error('密码长度不能少于6位数'));\n      } else {\n        if (_this.form.confirm_password !== '') {\n          _this.$refs.form.validateField('confirm_password');\n        }\n\n        callback();\n      }\n    };\n\n    var validatePassword2 = function validatePassword2(rule, value, callback) {\n      if (value === '') {\n        callback(new Error('请再次输入密码'));\n      } else if (value !== _this.form.new_password) {\n        callback(new Error('两次输入密码不一致!'));\n      } else {\n        callback();\n      }\n    };\n\n    return {\n      loading: false,\n      form: {\n        new_password: '',\n        confirm_password: ''\n      },\n      // 验证规则\n      rules: {\n        new_password: [{\n          validator: validatePassword,\n          trigger: 'blur',\n          required: true\n        }],\n        confirm_password: [{\n          validator: validatePassword2,\n          trigger: 'blur',\n          required: true\n        }]\n      }\n    };\n  },\n  methods: {\n    // 提交表单\n    submitForm: function submitForm(formName) {\n      var _this2 = this;\n\n      if (this.form.new_password === '' && this.form.confirm_password === '') {\n        this.$emit('handlePasswordResult', true);\n        return;\n      }\n\n      this.$refs[formName].validate( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(valid) {\n          var res;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  if (!valid) {\n                    _context.next = 15;\n                    break;\n                  }\n\n                  _context.prev = 1;\n                  _this2.loading = true;\n                  _context.next = 5;\n                  return Admin.changePassword(_this2.form.new_password, _this2.form.confirm_password, _this2.id);\n\n                case 5:\n                  res = _context.sent;\n                  _context.next = 12;\n                  break;\n\n                case 8:\n                  _context.prev = 8;\n                  _context.t0 = _context[\"catch\"](1);\n                  _this2.loading = false;\n                  console.log(_context.t0);\n\n                case 12:\n                  if (res.code < window.MAX_SUCCESS_CODE) {\n                    _this2.loading = false;\n\n                    _this2.$message.success(\"\".concat(res.message));\n\n                    _this2.resetForm(formName);\n\n                    _this2.$emit('handlePasswordResult', true);\n                  } else {\n                    _this2.loading = false;\n\n                    _this2.$message.error(\"\".concat(res.message));\n                  }\n\n                  _context.next = 19;\n                  break;\n\n                case 15:\n                  console.log('error submit!!');\n\n                  _this2.$message.error('请填写正确的信息');\n\n                  _this2.$emit('handlePasswordResult', false);\n\n                  return _context.abrupt(\"return\", false);\n\n                case 19:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee, null, [[1, 8]]);\n        }));\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    },\n    // 重置表单\n    resetForm: function resetForm(formName) {\n      this.$refs[formName].resetFields();\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AAEA;AACAA,eADA;AAEAC,MAFA,kBAEA;AAAA;;AACA;AACA;AACAC;AACA,OAFA,MAEA;AACAA;AACA,OAFA,MAEA;AACA;AACA;AACA;;AACAA;AACA;AACA,KAXA;;AAYA;AACA;AACAA;AACA,OAFA,MAEA;AACAA;AACA,OAFA,MAEA;AACAA;AACA;AACA,KARA;;AASA;AACAC,oBADA;AAEAC;AACAC,wBADA;AAEAC;AAFA,OAFA;AAMA;AACAC;AACAF;AAAAG;AAAAC;AAAAC;AAAA,UADA;AAEAJ;AAAAE;AAAAC;AAAAC;AAAA;AAFA;AAPA;AAYA,GApCA;AAqCAC;AACA;AACAC,cAFA,sBAEAC,QAFA,EAEA;AAAA;;AACA;AACA;AACA;AACA;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAEAC,KAFA;AAAA;AAAA;AAAA;;AAAA;AAKA;AALA;AAAA,yBAMAC,uFANA;;AAAA;AAMAC,qBANA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQA;AACAC;;AATA;AAWA;AACA;;AACA;;AACA;;AACA;AACA,mBALA,MAKA;AACA;;AACA;AACA;;AAnBA;AAAA;;AAAA;AAqBAA;;AACA;;AACA;;AAvBA,mDAwBA,KAxBA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AA2BA,KAlCA;AAmCA;AACAC,aApCA,qBAoCAL,QApCA,EAoCA;AACA;AACA;AAtCA;AArCA","names":["props","data","callback","loading","form","new_password","confirm_password","rules","validator","trigger","required","methods","submitForm","formName","valid","Admin","res","console","resetForm"],"sourceRoot":"src/view/admin/user","sources":["user-password.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <el-form\n      :model=\"form\"\n      status-icon\n      :rules=\"rules\"\n      label-position=\"right\"\n      ref=\"form\"\n      v-loading=\"loading\"\n      label-width=\"100px\"\n    >\n      <el-form-item label=\"密码\" prop=\"new_password\">\n        <el-input size=\"medium\" clearable type=\"password\" v-model=\"form.new_password\" autocomplete=\"off\"></el-input>\n      </el-form-item>\n      <el-form-item label=\"确认密码\" prop=\"confirm_password\" label-position=\"top\">\n        <el-input size=\"medium\" clearable type=\"password\" v-model=\"form.confirm_password\" autocomplete=\"off\"></el-input>\n      </el-form-item>\n      <el-form-item v-show=\"false\">\n        <el-button type=\"primary\" @click=\"submitForm('form')\">保存</el-button>\n        <el-button @click=\"resetForm('form')\">取消</el-button>\n      </el-form-item>\n    </el-form>\n  </div>\n</template>\n\n<script>\nimport Admin from '@/lin/model/admin'\n\nexport default {\n  props: ['id'],\n  data() {\n    const validatePassword = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请输入密码'))\n      } else if (value.length < 6) {\n        callback(new Error('密码长度不能少于6位数'))\n      } else {\n        if (this.form.confirm_password !== '') {\n          this.$refs.form.validateField('confirm_password')\n        }\n        callback()\n      }\n    }\n    const validatePassword2 = (rule, value, callback) => {\n      if (value === '') {\n        callback(new Error('请再次输入密码'))\n      } else if (value !== this.form.new_password) {\n        callback(new Error('两次输入密码不一致!'))\n      } else {\n        callback()\n      }\n    }\n    return {\n      loading: false,\n      form: {\n        new_password: '',\n        confirm_password: '',\n      },\n      // 验证规则\n      rules: {\n        new_password: [{ validator: validatePassword, trigger: 'blur', required: true }],\n        confirm_password: [{ validator: validatePassword2, trigger: 'blur', required: true }],\n      },\n    }\n  },\n  methods: {\n    // 提交表单\n    submitForm(formName) {\n      if (this.form.new_password === '' && this.form.confirm_password === '') {\n        this.$emit('handlePasswordResult', true)\n        return\n      }\n      this.$refs[formName].validate(async valid => {\n        // eslint-disable-line\n        if (valid) {\n          let res\n          try {\n            this.loading = true\n            res = await Admin.changePassword(this.form.new_password, this.form.confirm_password, this.id) // eslint-disable-line\n          } catch (e) {\n            this.loading = false\n            console.log(e)\n          }\n          if (res.code < window.MAX_SUCCESS_CODE) {\n            this.loading = false\n            this.$message.success(`${res.message}`)\n            this.resetForm(formName)\n            this.$emit('handlePasswordResult', true)\n          } else {\n            this.loading = false\n            this.$message.error(`${res.message}`)\n          }\n        } else {\n          console.log('error submit!!')\n          this.$message.error('请填写正确的信息')\n          this.$emit('handlePasswordResult', false)\n          return false\n        }\n      })\n    },\n    // 重置表单\n    resetForm(formName) {\n      this.$refs[formName].resetFields()\n    },\n  },\n}\n</script>\n"]}]}