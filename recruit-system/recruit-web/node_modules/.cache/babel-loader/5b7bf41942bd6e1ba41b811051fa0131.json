{"remainingRequest":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\src\\view\\position\\position-detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\src\\view\\position\\position-detail.vue","mtime":1656036094000},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\babel.config.js","mtime":1656036094000},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677772052210},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1677771858682},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677772052210},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1677772060461}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"C:\\\\Users\\\\Hacker\\\\Desktop\\\\zhaop\\\\resume-master\\\\resume-master\\\\recruit-system\\\\recruit-web\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Position } from '@/model/position';\nimport { Application } from '@/model/application';\nimport { Resume } from '@/model/resume';\nimport { Favor } from '@/model/favor';\nimport router from '../../router';\nexport default {\n  // 定义变量\n  props: {\n    // 子组件定义的变量通过父组件赋值\n    detailPositionID: {\n      type: Number\n    },\n    flag: {\n      type: Boolean,\n      default: true\n    },\n    temp: {\n      type: Number,\n      default: 0\n    }\n  },\n  data: function data() {\n    return {\n      loading: false,\n      form: {},\n      list: {\n        user_id: '',\n        position_id: '',\n        resume_id: '',\n        hr_id: '',\n        company_id: ''\n      },\n      collect: {}\n    };\n  },\n  mounted: function () {\n    var _mounted = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var res;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.loading = true;\n              _context.next = 3;\n              return Position.getById(this.detailPositionID);\n\n            case 3:\n              res = _context.sent;\n              _context.next = 6;\n              return Position.updateHits(this.detailPositionID);\n\n            case 6:\n              this.form = res;\n              this.getInfo();\n              this.loading = false;\n\n            case 9:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function mounted() {\n      return _mounted.apply(this, arguments);\n    }\n\n    return mounted;\n  }(),\n  methods: {\n    handlePass: function () {\n      var _handlePass = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(val) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.next = 2;\n                return Position.updateState(this.detailPositionID, 1);\n\n              case 2:\n                res = _context2.sent;\n\n                if (res.code < window.MAX_SUCCESS_CODE) {\n                  this.$message.success(\"\".concat(res.message)); // 返回查询所有未审核职位的页面\n\n                  this.$emit('detailClose');\n                }\n\n              case 4:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function handlePass(_x) {\n        return _handlePass.apply(this, arguments);\n      }\n\n      return handlePass;\n    }(),\n    handleFail: function () {\n      var _handleFail = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(val) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                _context3.next = 2;\n                return Position.updateState(this.detailPositionID, 2);\n\n              case 2:\n                res = _context3.sent;\n\n                if (res.code < window.MAX_SUCCESS_CODE) {\n                  this.$message.success(\"\".concat(res.message)); // 返回查询所有未审核职位的页面\n\n                  this.$emit('detailClose');\n                }\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleFail(_x2) {\n        return _handleFail.apply(this, arguments);\n      }\n\n      return handleFail;\n    }(),\n    // 投递简历\n    handleDelivery: function () {\n      var _handleDelivery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(val) {\n        var flag, temp, result, res;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                if (!(this.$store.getters.user === null)) {\n                  _context4.next = 3;\n                  break;\n                }\n\n                this.$message.error(\"请注册登录后投递简历\");\n                return _context4.abrupt(\"return\");\n\n              case 3:\n                _context4.next = 5;\n                return Application.getByPositionIdAndUserId(this.detailPositionID, this.$store.getters.user.id);\n\n              case 5:\n                flag = _context4.sent;\n\n                if (!(flag === false)) {\n                  _context4.next = 10;\n                  break;\n                }\n\n                // 不能重复投递\n                this.$message.error(\"你已投递过该职位，不可重复投递\");\n                _context4.next = 25;\n                break;\n\n              case 10:\n                // 获取当前登录求职者的用户id\n                this.list.user_id = this.$store.getters.user.id; // 获取当前投递简历的职位id\n\n                this.list.position_id = this.detailPositionID; // 根据用户id查询绑定的简历id\n\n                _context4.next = 14;\n                return Resume.getByUserId(this.$store.getters.user.id);\n\n              case 14:\n                temp = _context4.sent;\n                this.list.resume_id = temp.resume_id; // 根据职位id查询该职位所对应的hr_id\n\n                _context4.next = 18;\n                return Position.getById(this.detailPositionID);\n\n              case 18:\n                result = _context4.sent;\n                this.list.hr_id = result.hr_id;\n                this.list.company_id = result.company_id; // 调用创建申请的方法\n\n                _context4.next = 23;\n                return Application.create(this.list);\n\n              case 23:\n                res = _context4.sent;\n\n                if (res.code < window.MAX_SUCCESS_CODE) {\n                  this.$message.success(\"\".concat(res.message));\n                }\n\n              case 25:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function handleDelivery(_x3) {\n        return _handleDelivery.apply(this, arguments);\n      }\n\n      return handleDelivery;\n    }(),\n    getInfo: function () {\n      var _getInfo = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var temp, result;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                // 获取当前登录求职者的用户id\n                this.list.user_id = this.$store.getters.user.id; // 获取当前投递简历的职位id\n\n                this.list.position_id = this.detailPositionID; // 根据用户id查询绑定的简历id\n\n                _context5.next = 4;\n                return Resume.getByUserId(this.$store.getters.user.id);\n\n              case 4:\n                temp = _context5.sent;\n                this.list.resume_id = temp.id; // 根据职位id查询该职位所对应的hr_id\n\n                _context5.next = 8;\n                return Position.getById(this.detailPositionID);\n\n              case 8:\n                result = _context5.sent;\n                this.list.hr_id = result.hr_id;\n                this.list.company_id = result.company_id;\n\n              case 11:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function getInfo() {\n        return _getInfo.apply(this, arguments);\n      }\n\n      return getInfo;\n    }(),\n    // 收藏职位\n    handleCollect: function () {\n      var _handleCollect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(val) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(this.$store.getters.user === null)) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                this.$message.error(\"请注册登录后收藏职位\");\n                return _context6.abrupt(\"return\");\n\n              case 3:\n                // 获取当前登录求职者的用户id\n                this.collect.user_id = this.$store.getters.user.id; // 获取当前收藏的职位id\n\n                this.collect.position_id = this.detailPositionID; // 调用添加收藏的方法\n\n                _context6.next = 7;\n                return Favor.create(this.collect);\n\n              case 7:\n                res = _context6.sent;\n\n                if (res.code < window.MAX_SUCCESS_CODE) {\n                  this.$message.success(\"\".concat(res.message));\n                }\n\n              case 9:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function handleCollect(_x4) {\n        return _handleCollect.apply(this, arguments);\n      }\n\n      return handleCollect;\n    }(),\n    back: function back() {\n      // this.$router.go(-1)\n      // 由于showEdit这个变量是在父组件定义的，因此不能在子组件改变该变量的值，可以使用事件传递的方式，当点击了返回按钮，触发的事件处理机制交给父组件去处理\n      this.$emit('detailClose');\n    }\n  }\n};",{"version":3,"mappings":"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","names":["props","detailPositionID","type","flag","default","temp","data","loading","form","list","user_id","position_id","resume_id","hr_id","company_id","collect","mounted","Position","res","methods","handlePass","val","handleFail","handleDelivery","Application","Resume","result","getInfo","handleCollect","Favor","back"],"sourceRoot":"src/view/position","sources":["position-detail.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"title\">\n      <span>职位详细信息</span>\n      <span class=\"back\" @click=\"back\">\n        <i class=\"iconfont icon-fanhui\"></i> 返回\n      </span>\n    </div>\n    <el-divider></el-divider>\n    <div class=\"wrap\">\n      <el-row>\n        <el-col :lg=\"16\" :md=\"20\" :sm=\"24\" :xs=\"24\">\n          <el-form :model=\"form\" status-icon ref=\"form\" label-width=\"100px\" v-loading=\"loading\" @submit.native.prevent>\n            <el-form-item label=\"职位名称\" prop=\"title\">\n              <span>{{ form.title }}</span>\n            </el-form-item>\n            <el-form-item label=\"所属分类\" prop=\"category_name\">\n              <span>{{ form.category_name }}</span>\n            </el-form-item>\n            <el-form-item label=\"职位浏览量\" prop=\"hits\">\n              <span>{{ form.hits }}</span>\n            </el-form-item>\n            <el-form-item label=\"招聘人数\" prop=\"quantity\">\n              <span>{{ form.quantity }}</span>\n            </el-form-item>\n            <el-form-item label=\"薪资\" prop=\"salary_up\">\n              <span>{{ form.salary_down }}~{{ form.salary_up }}</span>\n            </el-form-item>\n            <el-form-item label=\"工作地点\" prop=\"city\">\n              <span>{{ form.city }}</span>\n            </el-form-item>\n            <el-form-item label=\"职位要求\" prop=\"requirement\">\n              <span>{{ form.requirement }}</span>\n            </el-form-item>\n            <el-form-item label=\"公司名称\" prop=\"company_name\">\n              <span>{{ form.company_name }}</span>\n            </el-form-item>\n            <el-form-item label=\"公司简介\" prop=\"company_desc\">\n              <span>{{ form.company_desc }}</span>\n            </el-form-item>\n            <el-form-item class=\"submit\">\n              <!--通过职位的状态属性state来控制通过按钮和不通过按钮是否显示-->\n              <el-button type=\"primary\" @click=\"handlePass('form')\" v-if=\"form.state == 0 && flag\">通 过</el-button>\n              <el-button @click=\"handleFail('form')\" v-if=\"form.state == 0 && flag\">不通过</el-button>\n              <el-button type=\"primary\" @click=\"handleDelivery('form')\" v-if=\"temp == 1\">投递简历</el-button>\n              <el-button @click=\"handleCollect('form')\" v-if=\"temp == 1\">收藏职位</el-button>\n            </el-form-item>\n          </el-form>\n        </el-col>\n      </el-row>\n    </div>\n  </div>\n</template>\n\n<script>\nimport { Position } from '@/model/position'\nimport { Application } from '@/model/application'\nimport { Resume } from '@/model/resume'\nimport { Favor } from '@/model/favor'\nimport router from '../../router'\n\nexport default {\n  // 定义变量\n  props: {\n    // 子组件定义的变量通过父组件赋值\n    detailPositionID: {\n      type: Number,\n    },\n    flag: {\n      type: Boolean,\n      default: true,\n    },\n    temp: {\n      type: Number,\n      default: 0,\n    },\n  },\n  data() {\n    return {\n      loading: false,\n      form: {\n      },\n      list: {\n        user_id: '',\n        position_id: '',\n        resume_id: '',\n        hr_id: '',\n        company_id: '',\n      },\n      collect: {\n      },\n    }\n  },\n  async mounted() {\n    this.loading = true\n    const res = await Position.getById(this.detailPositionID)\n    // 更新职位浏览量(每进入一次职位详情页面，职位浏览量加一)\n    await Position.updateHits(this.detailPositionID)\n    this.form = res\n    this.getInfo()\n    this.loading = false\n  },\n  methods: {\n    async handlePass(val) {\n      const res = await Position.updateState(this.detailPositionID, 1)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(`${res.message}`)\n        // 返回查询所有未审核职位的页面\n        this.$emit('detailClose')\n      }\n    },\n    async handleFail(val) {\n      const res = await Position.updateState(this.detailPositionID, 2)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(`${res.message}`)\n        // 返回查询所有未审核职位的页面\n        this.$emit('detailClose')\n      }\n    },\n    // 投递简历\n    async handleDelivery(val) {\n      if (this.$store.getters.user === null) {\n        this.$message.error(\"请注册登录后投递简历\")\n        return\n      }\n      // 根据用户id和职位id判断用户是否已经投递过该职位，避免重复投递\n      const flag = await Application.getByPositionIdAndUserId(this.detailPositionID, this.$store.getters.user.id)\n      if (flag === false) {\n        // 不能重复投递\n        this.$message.error(\"你已投递过该职位，不可重复投递\")\n      } else {\n        // 获取当前登录求职者的用户id\n        this.list.user_id = this.$store.getters.user.id\n        // 获取当前投递简历的职位id\n        this.list.position_id = this.detailPositionID\n        // 根据用户id查询绑定的简历id\n        const temp = await Resume.getByUserId(this.$store.getters.user.id)\n        this.list.resume_id = temp.resume_id\n        // 根据职位id查询该职位所对应的hr_id\n        const result = await Position.getById(this.detailPositionID)\n        this.list.hr_id = result.hr_id\n        this.list.company_id = result.company_id\n        // 调用创建申请的方法\n        const res = await Application.create(this.list)\n        if (res.code < window.MAX_SUCCESS_CODE) {\n          this.$message.success(`${res.message}`)\n        }\n      }\n    },\n    async getInfo() {\n      // 获取当前登录求职者的用户id\n      this.list.user_id = this.$store.getters.user.id\n      // 获取当前投递简历的职位id\n      this.list.position_id = this.detailPositionID\n      // 根据用户id查询绑定的简历id\n      const temp = await Resume.getByUserId(this.$store.getters.user.id)\n      this.list.resume_id = temp.id\n      // 根据职位id查询该职位所对应的hr_id\n      const result = await Position.getById(this.detailPositionID)\n      this.list.hr_id = result.hr_id\n      this.list.company_id = result.company_id\n    },\n    // 收藏职位\n    async handleCollect(val) {\n      if (this.$store.getters.user === null) {\n        this.$message.error(\"请注册登录后收藏职位\")\n        return\n      }\n      // 获取当前登录求职者的用户id\n      this.collect.user_id = this.$store.getters.user.id\n      // 获取当前收藏的职位id\n      this.collect.position_id = this.detailPositionID\n      // 调用添加收藏的方法\n      const res = await Favor.create(this.collect)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(`${res.message}`)\n      }\n    },\n    back() {\n      // this.$router.go(-1)\n      // 由于showEdit这个变量是在父组件定义的，因此不能在子组件改变该变量的值，可以使用事件传递的方式，当点击了返回按钮，触发的事件处理机制交给父组件去处理\n      this.$emit('detailClose')\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.el-divider--horizontal {\n  margin: 0;\n}\n\n.container {\n  text-align: left;\n\n  .title {\n    height: 59px;\n    line-height: 59px;\n    color: $parent-title-color;\n    font-size: 16px;\n    font-weight: 500;\n    text-indent: 40px;\n\n    .back {\n      float: right;\n      margin-right: 40px;\n      cursor: pointer;\n    }\n  }\n\n  .wrap {\n    padding: 20px;\n  }\n\n  .submit {\n    float: left;\n  }\n}\n</style>\n"]}]}