{"remainingRequest":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\src\\view\\admin\\user\\user-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\src\\view\\admin\\user\\user-list.vue","mtime":1656036094000},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\babel.config.js","mtime":1656036094000},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677772052210},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1677771858682},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677772052210},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1677772060461}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"C:\\\\Users\\\\Hacker\\\\Desktop\\\\zhaop\\\\resume-master\\\\resume-master\\\\recruit-system\\\\recruit-web\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Admin from '@/lin/model/admin';\nimport LinTable from '@/component/base/table/lin-table';\nimport UserInfo from './user-info';\nimport UserPassword from './user-password';\nexport default {\n  components: {\n    LinTable: LinTable,\n    UserInfo: UserInfo,\n    UserPassword: UserPassword\n  },\n  inject: ['eventBus'],\n  data: function data() {\n    return {\n      id: 0,\n      // 用户id\n      refreshPagination: true,\n      // 页数增加的时候，因为缓存的缘故，需要刷新Pagination组件\n      editIndex: null,\n      // 编辑的行\n      total_nums: 0,\n      // 分组内的用户总数\n      currentPage: 1,\n      // 默认获取第一页的数据\n      pageCount: 10,\n      // 每页10条数据\n      tableData: [],\n      // 表格数据\n      tableColumn: [],\n      // 表头数据\n      operate: [],\n      // 表格按键操作区\n      dialogFormVisible: false,\n      // 控制弹窗显示\n      selectGroup: '',\n      // 选中的分组Id\n      groups: [],\n      // 所有分组\n      group_id: undefined,\n      activeTab: '修改信息',\n      form: {\n        // 表单信息\n        username: '',\n        password: '',\n        confirm_password: '',\n        email: '',\n        tel: '',\n        group_ids: []\n      },\n      loading: false\n    };\n  },\n  methods: {\n    // 根据分组 刷新/获取分组内的用户\n    getAdminUsers: function () {\n      var _getAdminUsers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res, currentPage;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                currentPage = this.currentPage - 1;\n                _context.prev = 1;\n                this.loading = true;\n                _context.next = 5;\n                return Admin.getAdminUsers({\n                  group_id: this.group_id,\n                  count: this.pageCount,\n                  page: currentPage\n                });\n\n              case 5:\n                res = _context.sent;\n                // eslint-disable-line\n                this.loading = false;\n                this.tableData = this.shuffleList(res.items);\n                this.total_nums = res.total;\n                _context.next = 15;\n                break;\n\n              case 11:\n                _context.prev = 11;\n                _context.t0 = _context[\"catch\"](1);\n                this.loading = false;\n                console.log(_context.t0);\n\n              case 15:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[1, 11]]);\n      }));\n\n      function getAdminUsers() {\n        return _getAdminUsers.apply(this, arguments);\n      }\n\n      return getAdminUsers;\n    }(),\n    // 获取所有分组\n    getAllGroups: function () {\n      var _getAllGroups = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                this.loading = true;\n                _context2.next = 4;\n                return Admin.getAllGroups();\n\n              case 4:\n                this.groups = _context2.sent;\n                this.loading = false;\n                _context2.next = 12;\n                break;\n\n              case 8:\n                _context2.prev = 8;\n                _context2.t0 = _context2[\"catch\"](0);\n                this.loading = false;\n                console.log(_context2.t0);\n\n              case 12:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 8]]);\n      }));\n\n      function getAllGroups() {\n        return _getAllGroups.apply(this, arguments);\n      }\n\n      return getAllGroups;\n    }(),\n    // 获取所拥有的权限并渲染  由子组件提供\n    handleEdit: function () {\n      var _handleEdit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(val) {\n        var selectedData;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.editIndex = val.index;\n\n                // 单击 编辑按键\n                if (val.index >= 0) {\n                  selectedData = val.row;\n                } else {\n                  // 单击 table row\n                  selectedData = val;\n                }\n\n                this.id = selectedData.id;\n                this.form.tel = selectedData.tel;\n                this.form.username = selectedData.username;\n                this.form.email = selectedData.email;\n                this.form.group_ids = selectedData.groups;\n                this.dialogFormVisible = true;\n\n              case 8:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleEdit(_x) {\n        return _handleEdit.apply(this, arguments);\n      }\n\n      return handleEdit;\n    }(),\n    // 下拉框选择分组\n    handleChange: function () {\n      var _handleChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.currentPage = 1;\n                this.loading = true;\n                _context4.next = 4;\n                return this.getAdminUsers();\n\n              case 4:\n                this.loading = false;\n\n              case 5:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function handleChange() {\n        return _handleChange.apply(this, arguments);\n      }\n\n      return handleChange;\n    }(),\n    // 切换table页\n    handleCurrentChange: function () {\n      var _handleCurrentChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(val) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.currentPage = val;\n                this.loading = true;\n                _context5.next = 4;\n                return this.getAdminUsers('changePage');\n\n              case 4:\n                this.loading = false;\n\n              case 5:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function handleCurrentChange(_x2) {\n        return _handleCurrentChange.apply(this, arguments);\n      }\n\n      return handleCurrentChange;\n    }(),\n    handleDelete: function handleDelete(val) {\n      var _this = this;\n\n      var res;\n      this.$confirm('此操作将永久删除该用户, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _this.loading = true;\n                _context6.next = 4;\n                return Admin.deleteOneUser(val.row.id);\n\n              case 4:\n                res = _context6.sent;\n                _context6.next = 11;\n                break;\n\n              case 7:\n                _context6.prev = 7;\n                _context6.t0 = _context6[\"catch\"](0);\n                _this.loading = false;\n                console.log(_context6.t0);\n\n              case 11:\n                if (!(res.code < window.MAX_SUCCESS_CODE)) {\n                  _context6.next = 19;\n                  break;\n                }\n\n                _this.loading = false;\n\n                if (_this.total_nums % _this.pageCount === 1 && _this.currentPage !== 1) {\n                  // 判断删除的是不是每一页的最后一条数据\n                  _this.currentPage--;\n                }\n\n                _context6.next = 16;\n                return _this.getAdminUsers();\n\n              case 16:\n                _this.$message({\n                  type: 'success',\n                  message: \"\".concat(res.message)\n                });\n\n                _context6.next = 21;\n                break;\n\n              case 19:\n                _this.loading = false;\n\n                _this.$message.error(\"\".concat(res.message));\n\n              case 21:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, null, [[0, 7]]);\n      })));\n    },\n    // 提交表单信息\n    confirmEdit: function () {\n      var _confirmEdit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (!(this.activeTab === '修改信息')) {\n                  _context7.next = 5;\n                  break;\n                }\n\n                _context7.next = 3;\n                return this.$refs.userInfo.submitForm('form');\n\n              case 3:\n                _context7.next = 7;\n                break;\n\n              case 5:\n                _context7.next = 7;\n                return this.$refs.password.submitForm('form');\n\n              case 7:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function confirmEdit() {\n        return _confirmEdit.apply(this, arguments);\n      }\n\n      return confirmEdit;\n    }(),\n    // 重置\n    resetForm: function resetForm() {\n      if (this.activeTab === '修改信息') {\n        this.$refs.userInfo.resetForm('form');\n      } else {\n        this.$refs.password.resetForm('form');\n      }\n    },\n    // 双击 table ro\n    rowClick: function rowClick(row) {\n      this.handleEdit(row);\n    },\n    // 弹框 右上角 X\n    handleClose: function handleClose(done) {\n      this.dialogFormVisible = false;\n      done();\n    },\n    // 切换tab栏\n    handleClick: function handleClick(tab) {\n      this.activeTab = tab.name;\n    },\n    // 监听子组件更新用户信息是否成功\n    handleInfoResult: function () {\n      var _handleInfoResult = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(flag) {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                this.dialogFormVisible = false;\n\n                if (flag === true) {\n                  this.getAdminUsers();\n                }\n\n              case 2:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function handleInfoResult(_x3) {\n        return _handleInfoResult.apply(this, arguments);\n      }\n\n      return handleInfoResult;\n    }(),\n    // 监听子组件更新密码是否成功\n    handlePasswordResult: function handlePasswordResult(result) {\n      if (result === true) {\n        this.dialogFormVisible = false;\n      }\n    },\n    // 监听添加用户是否成功\n    addUser: function () {\n      var _addUser = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(flag) {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (!(flag === true)) {\n                  _context9.next = 6;\n                  break;\n                }\n\n                if (this.total_nums % this.pageCount === 0) {\n                  // 判断当前页的数据是不是满了，需要增加新的页码\n                  this.currentPage++;\n                }\n\n                _context9.next = 4;\n                return this.getAdminUsers();\n\n              case 4:\n                this.refreshPagination = false; // 刷新pagination组件\n\n                this.$nextTick(function () {\n                  _this2.refreshPagination = true;\n                });\n\n              case 6:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9, this);\n      }));\n\n      function addUser(_x4) {\n        return _addUser.apply(this, arguments);\n      }\n\n      return addUser;\n    }(),\n    shuffleList: function shuffleList(users) {\n      var list = [];\n      users.forEach(function (element) {\n        var groups = [];\n        element.groups.forEach(function (item) {\n          groups.push(item.name);\n        });\n        element.groupNames = groups.join(',');\n        list.push(element);\n      });\n      return list;\n    }\n  },\n  created: function () {\n    var _created = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return this.getAdminUsers();\n\n            case 2:\n              this.getAllGroups();\n              this.tableColumn = [{\n                prop: 'username',\n                label: '名称'\n              }, {\n                prop: 'groupNames',\n                label: '所属角色'\n              }]; // 设置表头信息\n\n              this.operate = [{\n                name: '编辑',\n                func: 'handleEdit',\n                type: 'primary'\n              }, {\n                name: '删除',\n                func: 'handleDelete',\n                type: 'danger'\n              }];\n              this.eventBus.$on('addUser', this.addUser);\n\n            case 6:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  beforeDestroy: function beforeDestroy() {\n    this.eventBus.$off('addUser', this.addUser);\n  }\n};",{"version":3,"mappings":"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","names":["components","LinTable","UserInfo","UserPassword","inject","data","id","refreshPagination","editIndex","total_nums","currentPage","pageCount","tableData","tableColumn","operate","dialogFormVisible","selectGroup","groups","group_id","activeTab","form","username","password","confirm_password","email","tel","group_ids","loading","methods","getAdminUsers","Admin","count","page","res","console","getAllGroups","handleEdit","val","selectedData","handleChange","handleCurrentChange","handleDelete","confirmButtonText","cancelButtonText","type","then","message","confirmEdit","resetForm","rowClick","row","handleClose","done","handleClick","tab","handleInfoResult","flag","handlePasswordResult","result","addUser","shuffleList","users","element","list","created","prop","label","name","func","beforeDestroy"],"sourceRoot":"src/view/admin/user","sources":["user-list.vue"],"sourcesContent":["<template>\n  <div class=\"container\">\n    <div class=\"header\">\n      <div class=\"title\">用户列表</div>\n      <!-- 分组选择下拉框 -->\n      <el-select size=\"medium\" filterable v-model=\"group_id\" placeholder=\"请选择角色\" @change=\"handleChange\" clearable>\n        <el-option v-for=\"(group, index) in groups\" :key=\"index\" :label=\"group.name\" :value=\"group.id\"></el-option>\n      </el-select>\n    </div>\n    <!-- 表格 -->\n    <lin-table :tableColumn=\"tableColumn\" :tableData=\"tableData\" :operate=\"operate\" @handleEdit=\"handleEdit\"\n      @handleDelete=\"handleDelete\" @row-click=\"rowClick\" v-loading=\"loading\"></lin-table>\n    <!-- 分页 -->\n    <div class=\"pagination\">\n      <el-pagination @current-change=\"handleCurrentChange\" :background=\"true\" :page-size=\"pageCount\"\n        :current-page=\"currentPage\" v-if=\"refreshPagination\" layout=\"prev, pager, next, jumper\" :total=\"total_nums\">\n      </el-pagination>\n    </div>\n    <!-- 弹窗 -->\n    <el-dialog title=\"用户信息\" :append-to-body=\"true\" :before-close=\"handleClose\" :visible.sync=\"dialogFormVisible\">\n      <div style=\"margin-top:-25px;\">\n        <el-tabs v-model=\"activeTab\" @tab-click=\"handleClick\">\n          <el-tab-pane label=\"修改信息\" name=\"修改信息\">\n            <user-info ref=\"userInfo\" v-if=\"dialogFormVisible\" @handleInfoResult=\"handleInfoResult\"\n              labelPosition=\"right\" pageType=\"edit\" :id=\"id\" :groups=\"groups\" :info=\"form\" :submit=\"false\"\n              class=\"info\" />\n          </el-tab-pane>\n          <el-tab-pane label=\"修改密码\" name=\"修改密码\">\n            <user-password @handlePasswordResult=\"handlePasswordResult\" ref=\"password\" :id=\"id\" class=\"password\" />\n          </el-tab-pane>\n        </el-tabs>\n      </div>\n      <!-- 按键操作 -->\n      <div slot=\"footer\" class=\"dialog-footer\">\n        <el-button type=\"primary\" @click=\"confirmEdit\">确 定</el-button>\n        <el-button @click=\"resetForm\">重 置</el-button>\n      </div>\n    </el-dialog>\n  </div>\n</template>\n\n<script>\nimport Admin from '@/lin/model/admin'\nimport LinTable from '@/component/base/table/lin-table'\nimport UserInfo from './user-info'\nimport UserPassword from './user-password'\n\nexport default {\n  components: { LinTable, UserInfo, UserPassword },\n  inject: ['eventBus'],\n  data() {\n    return {\n      id: 0, // 用户id\n      refreshPagination: true, // 页数增加的时候，因为缓存的缘故，需要刷新Pagination组件\n      editIndex: null, // 编辑的行\n      total_nums: 0, // 分组内的用户总数\n      currentPage: 1, // 默认获取第一页的数据\n      pageCount: 10, // 每页10条数据\n      tableData: [], // 表格数据\n      tableColumn: [], // 表头数据\n      operate: [], // 表格按键操作区\n      dialogFormVisible: false, // 控制弹窗显示\n      selectGroup: '', // 选中的分组Id\n      groups: [], // 所有分组\n      group_id: undefined,\n      activeTab: '修改信息',\n      form: {\n        // 表单信息\n        username: '',\n        password: '',\n        confirm_password: '',\n        email: '',\n        tel: '',\n        group_ids: [],\n      },\n      loading: false,\n    }\n  },\n  methods: {\n    // 根据分组 刷新/获取分组内的用户\n    async getAdminUsers() {\n      let res\n      const currentPage = this.currentPage - 1\n      try {\n        this.loading = true\n        res = await Admin.getAdminUsers({ group_id: this.group_id, count: this.pageCount, page: currentPage }) // eslint-disable-line\n        this.loading = false\n        this.tableData = this.shuffleList(res.items)\n        this.total_nums = res.total\n      } catch (e) {\n        this.loading = false\n        console.log(e)\n      }\n    },\n    // 获取所有分组\n    async getAllGroups() {\n      try {\n        this.loading = true\n        this.groups = await Admin.getAllGroups()\n        this.loading = false\n      } catch (e) {\n        this.loading = false\n        console.log(e)\n      }\n    },\n    // 获取所拥有的权限并渲染  由子组件提供\n    async handleEdit(val) {\n      this.editIndex = val.index\n      let selectedData\n      // 单击 编辑按键\n      if (val.index >= 0) {\n        selectedData = val.row\n      } else {\n        // 单击 table row\n        selectedData = val\n      }\n      this.id = selectedData.id\n      this.form.tel = selectedData.tel\n      this.form.username = selectedData.username\n      this.form.email = selectedData.email\n      this.form.group_ids = selectedData.groups\n      this.dialogFormVisible = true\n    },\n    // 下拉框选择分组\n    async handleChange() {\n      this.currentPage = 1\n      this.loading = true\n      await this.getAdminUsers()\n      this.loading = false\n    },\n    // 切换table页\n    async handleCurrentChange(val) {\n      this.currentPage = val\n      this.loading = true\n      await this.getAdminUsers('changePage')\n      this.loading = false\n    },\n    handleDelete(val) {\n      let res\n      this.$confirm('此操作将永久删除该用户, 是否继续?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n      }).then(async () => {\n        try {\n          this.loading = true\n          res = await Admin.deleteOneUser(val.row.id)\n        } catch (e) {\n          this.loading = false\n          console.log(e)\n        }\n        if (res.code < window.MAX_SUCCESS_CODE) {\n          this.loading = false\n          if (this.total_nums % this.pageCount === 1 && this.currentPage !== 1) {\n            // 判断删除的是不是每一页的最后一条数据\n            this.currentPage--\n          }\n          await this.getAdminUsers()\n          this.$message({\n            type: 'success',\n            message: `${res.message}`,\n          })\n        } else {\n          this.loading = false\n          this.$message.error(`${res.message}`)\n        }\n      })\n    },\n    // 提交表单信息\n    async confirmEdit() {\n      if (this.activeTab === '修改信息') {\n        await this.$refs.userInfo.submitForm('form')\n      } else {\n        await this.$refs.password.submitForm('form')\n      }\n    },\n    // 重置\n    resetForm() {\n      if (this.activeTab === '修改信息') {\n        this.$refs.userInfo.resetForm('form')\n      } else {\n        this.$refs.password.resetForm('form')\n      }\n    },\n    // 双击 table ro\n    rowClick(row) {\n      this.handleEdit(row)\n    },\n    // 弹框 右上角 X\n    handleClose(done) {\n      this.dialogFormVisible = false\n      done()\n    },\n    // 切换tab栏\n    handleClick(tab) {\n      this.activeTab = tab.name\n    },\n    // 监听子组件更新用户信息是否成功\n    async handleInfoResult(flag) {\n      this.dialogFormVisible = false\n      if (flag === true) {\n        this.getAdminUsers()\n      }\n    },\n    // 监听子组件更新密码是否成功\n    handlePasswordResult(result) {\n      if (result === true) {\n        this.dialogFormVisible = false\n      }\n    },\n    // 监听添加用户是否成功\n    async addUser(flag) {\n      if (flag === true) {\n        if (this.total_nums % this.pageCount === 0) {\n          // 判断当前页的数据是不是满了，需要增加新的页码\n          this.currentPage++\n        }\n        await this.getAdminUsers()\n        this.refreshPagination = false // 刷新pagination组件\n        this.$nextTick(() => {\n          this.refreshPagination = true\n        })\n      }\n    },\n    shuffleList(users) {\n      const list = []\n      users.forEach(element => {\n        const groups = []\n        element.groups.forEach(item => {\n          groups.push(item.name)\n        })\n        element.groupNames = groups.join(',')\n        list.push(element)\n      })\n      return list\n    },\n  },\n  async created() {\n    await this.getAdminUsers()\n    this.getAllGroups()\n    this.tableColumn = [\n      { prop: 'username', label: '名称' },\n      { prop: 'groupNames', label: '所属角色' },\n    ] // 设置表头信息\n    this.operate = [\n      { name: '编辑', func: 'handleEdit', type: 'primary' },\n      { name: '删除', func: 'handleDelete', type: 'danger' },\n    ]\n    this.eventBus.$on('addUser', this.addUser)\n  },\n  beforeDestroy() {\n    this.eventBus.$off('addUser', this.addUser)\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.container {\n  padding: 0 30px;\n\n  .header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    .title {\n      height: 59px;\n      line-height: 59px;\n      color: $parent-title-color;\n      font-size: 16px;\n      font-weight: 500;\n    }\n  }\n\n  .pagination {\n    display: flex;\n    justify-content: flex-end;\n    margin: 20px;\n  }\n}\n\n.info {\n  margin-left: -55px;\n  margin-bottom: -30px;\n}\n\n.password {\n  margin-top: 20px;\n  margin-left: -55px;\n  margin-bottom: -20px;\n}\n</style>\n"]}]}