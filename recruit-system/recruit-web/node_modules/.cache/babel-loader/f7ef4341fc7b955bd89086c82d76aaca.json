{"remainingRequest":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\src\\view\\position\\position-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\src\\view\\position\\position-list.vue","mtime":1656036094000},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\babel.config.js","mtime":1656036094000},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677772052210},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1677771858682},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677772052210},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1677772060461}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"C:\\\\Users\\\\Hacker\\\\Desktop\\\\zhaop\\\\resume-master\\\\resume-master\\\\recruit-system\\\\recruit-web\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport { Position } from '@/model/position';\nimport PositionModify from '@/view/position/position-modify';\nexport default {\n  components: {\n    PositionModify: PositionModify\n  },\n  data: function data() {\n    return {\n      loading: false,\n      tableData: [],\n      totalNums: 0,\n      currentPage: 1,\n      pageCount: 10,\n      refreshPagination: true,\n      showEdit: false,\n      editPositionID: 0\n    };\n  },\n  created: function () {\n    var _created = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.loading = true;\n              _context.next = 3;\n              return this.getByHrId();\n\n            case 3:\n              this.loading = false;\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  methods: {\n    getByHrId: function () {\n      var _getByHrId = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var page, count, res;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                _context2.prev = 0;\n                page = this.currentPage - 1;\n                count = this.pageCount;\n                _context2.next = 5;\n                return Position.getByHrId(this.$store.getters.user.id, page, count);\n\n              case 5:\n                res = _context2.sent;\n                this.tableData = res.items;\n                this.totalNums = res.total;\n                _context2.next = 13;\n                break;\n\n              case 10:\n                _context2.prev = 10;\n                _context2.t0 = _context2[\"catch\"](0);\n                this.tableData = [];\n\n              case 13:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[0, 10]]);\n      }));\n\n      function getByHrId() {\n        return _getByHrId.apply(this, arguments);\n      }\n\n      return getByHrId;\n    }(),\n    // 对发布时间列进行格式化\n    dateFormat: function dateFormat(row, column) {\n      return row['release_date'].substring(0, 10);\n    },\n    // 对职位状态列进行格式化\n    stateFormat: function stateFormat(row, column) {\n      if (row['state'] === 0) {\n        return \"未审核\";\n      } else if (row['state'] === 1) {\n        return \"审核通过\";\n      } else {\n        return \"审核不通过\";\n      }\n    },\n    // 切换table页\n    handleCurrentChange: function () {\n      var _handleCurrentChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(val) {\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                this.currentPage = val;\n                this.loading = true;\n                this.getByHrId();\n                this.loading = false;\n\n              case 4:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function handleCurrentChange(_x) {\n        return _handleCurrentChange.apply(this, arguments);\n      }\n\n      return handleCurrentChange;\n    }(),\n    handleEdit: function handleEdit(val) {\n      this.showEdit = true;\n      this.editPositionID = val.id;\n    },\n    handleDelete: function handleDelete(val) {\n      var _this = this;\n\n      this.$confirm('是否下架该职位?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning'\n      }).then( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.next = 2;\n                return Position.delete(val.id);\n\n              case 2:\n                res = _context4.sent;\n\n                if (res.code < window.MAX_SUCCESS_CODE) {\n                  _this.getByHrId();\n\n                  _this.$message({\n                    type: 'success',\n                    message: \"\".concat(res.message)\n                  });\n                }\n\n              case 4:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      })));\n    },\n    rowClick: function rowClick() {},\n    editClose: function editClose() {\n      this.showEdit = false;\n      this.getByHrId();\n    }\n  }\n};",{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCA;AACA;AAEA;AACAA;AACAC;AADA,GADA;AAIAC,MAJA,kBAIA;AACA;AACAC,oBADA;AAEAC,mBAFA;AAGAC,kBAHA;AAIAC,oBAJA;AAKAC,mBALA;AAMAC,6BANA;AAOAC,qBAPA;AAQAC;AARA;AAUA,GAfA;AAgBAC,SAhBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAiBA;AAjBA;AAAA,qBAkBA,gBAlBA;;AAAA;AAmBA;;AAnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAqBAC;AACAC,aADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGAC,oBAHA,GAGA,oBAHA;AAIAC,qBAJA,GAIA,cAJA;AAAA;AAAA,uBAKAC,4DALA;;AAAA;AAKAC,mBALA;AAMA;AACA;AAPA;AAAA;;AAAA;AAAA;AAAA;AASA;;AATA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAYA;AACAC,cAbA,sBAaAC,GAbA,EAaAC,MAbA,EAaA;AACA;AACA,KAfA;AAgBA;AACAC,eAjBA,uBAiBAF,GAjBA,EAiBAC,MAjBA,EAiBA;AACA;AACA;AACA,OAFA,MAEA;AACA;AACA,OAFA,MAEA;AACA;AACA;AACA,KAzBA;AA0BA;AACAE,uBA3BA;AAAA,4GA2BAC,GA3BA;AAAA;AAAA;AAAA;AAAA;AA4BA;AACA;AACA;AACA;;AA/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAiCAC,cAjCA,sBAiCAD,GAjCA,EAiCA;AACA;AACA;AACA,KApCA;AAqCAE,gBArCA,wBAqCAF,GArCA,EAqCA;AAAA;;AACA;AACAG,+BADA;AAEAC,8BAFA;AAGAC;AAHA,SAIAC,IAJA,wEAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACAb,uBADA;;AAAA;AACAC,mBADA;;AAEA;AACA;;AACA;AACAW,mCADA;AAEAE;AAFA;AAIA;;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAJA;AAcA,KApDA;AAqDAC,YArDA,sBAqDA,EArDA;AAsDAC,aAtDA,uBAsDA;AACA;AACA;AACA;AAzDA;AArBA","names":["components","PositionModify","data","loading","tableData","totalNums","currentPage","pageCount","refreshPagination","showEdit","editPositionID","created","methods","getByHrId","page","count","Position","res","dateFormat","row","column","stateFormat","handleCurrentChange","val","handleEdit","handleDelete","confirmButtonText","cancelButtonText","type","then","message","rowClick","editClose"],"sourceRoot":"src/view/position","sources":["position-list.vue"],"sourcesContent":["<template>\n  <div>\n    <!-- 列表页面 -->\n    <div class=\"container\" v-if=\"!showEdit\">\n      <div class=\"header\">\n        <div class=\"title\" style=\" text-align: left;\">已发布的职位</div>\n      </div>\n      <!-- 表格 -->\n      <el-table :data=\"tableData\" style=\"width: 100%\" :default-sort=\"{ prop: 'release_date', order: 'descending' }\">\n        <el-table-column prop=\"release_date\" label=\"发布时间\" sortable :formatter=\"dateFormat\"></el-table-column>\n        <el-table-column prop=\"title\" label=\"职位名称\"></el-table-column>\n        <el-table-column prop=\"city\" label=\"工作地点\"></el-table-column>\n        <el-table-column prop=\"quantity\" label=\"招聘人数\"></el-table-column>\n        <el-table-column prop=\"state\" label=\"是否审核\" :formatter=\"stateFormat\"></el-table-column>\n        <el-table-column label=\"操作\">\n          <template slot-scope=\"scope\">\n            <el-button @click.prevent=\"handleEdit(scope.row)\" type=\"primary\" plain size=\"mini\">编辑</el-button>\n            <el-button @click.prevent=\"handleDelete(scope.row)\" type=\"danger\" plain size=\"mini\">下架职位</el-button>\n          </template>\n        </el-table-column>\n      </el-table>\n      <div class=\"pagination\">\n        <el-pagination @current-change=\"handleCurrentChange\" :background=\"true\" :page-size=\"pageCount\"\n          :current-page=\"currentPage\" v-if=\"refreshPagination\" layout=\"prev, pager, next, jumper\" :total=\"totalNums\">\n        </el-pagination>\n      </div>\n    </div>\n    <!-- 编辑职位 -->\n    <position-modify v-else @editClose=\"editClose\" :editPositionID=\"editPositionID\"></position-modify>\n  </div>\n</template>\n\n<script>\nimport { Position } from '@/model/position'\nimport PositionModify from '@/view/position/position-modify'\n\nexport default {\n  components: {\n    PositionModify,\n  },\n  data() {\n    return {\n      loading: false,\n      tableData: [],\n      totalNums: 0,\n      currentPage: 1,\n      pageCount: 10,\n      refreshPagination: true,\n      showEdit: false,\n      editPositionID: 0,\n    }\n  },\n  async created() {\n    this.loading = true\n    await this.getByHrId()\n    this.loading = false\n  },\n  methods: {\n    async getByHrId() {\n      try {\n        const page = this.currentPage - 1\n        const count = this.pageCount\n        const res = await Position.getByHrId(this.$store.getters.user.id, page, count)\n        this.tableData = res.items\n        this.totalNums = res.total\n      } catch (error) {\n        this.tableData = []\n      }\n    },\n    // 对发布时间列进行格式化\n    dateFormat(row, column) {\n      return row['release_date'].substring(0, 10)\n    },\n    // 对职位状态列进行格式化\n    stateFormat(row, column) {\n      if (row['state'] === 0) {\n        return \"未审核\";\n      } else if (row['state'] === 1) {\n        return \"审核通过\";\n      } else {\n        return \"审核不通过\";\n      }\n    },\n    // 切换table页\n    async handleCurrentChange(val) {\n      this.currentPage = val\n      this.loading = true\n      this.getByHrId()\n      this.loading = false\n    },\n    handleEdit(val) {\n      this.showEdit = true\n      this.editPositionID = val.id\n    },\n    handleDelete(val) {\n      this.$confirm('是否下架该职位?', '提示', {\n        confirmButtonText: '确定',\n        cancelButtonText: '取消',\n        type: 'warning',\n      }).then(async () => {\n        const res = await Position.delete(val.id)\n        if (res.code < window.MAX_SUCCESS_CODE) {\n          this.getByHrId()\n          this.$message({\n            type: 'success',\n            message: `${res.message}`,\n          })\n        }\n      })\n    },\n    rowClick() { },\n    editClose() {\n      this.showEdit = false\n      this.getByHrId()\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.container {\n  padding: 0 30px;\n\n  .header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    .title {\n      text-align: left;\n      height: 59px;\n      line-height: 59px;\n      color: $parent-title-color;\n      font-size: 16px;\n      font-weight: 500;\n    }\n  }\n\n  .pagination {\n    display: flex;\n    justify-content: flex-end;\n    margin: 20px;\n  }\n}\n</style>\n"]}]}