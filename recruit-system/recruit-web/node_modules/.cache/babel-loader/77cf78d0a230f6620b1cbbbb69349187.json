{"remainingRequest":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\src\\component\\base\\table\\lin-table.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\src\\component\\base\\table\\lin-table.vue","mtime":1656036094000},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\babel.config.js","mtime":1656036094000},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677772052210},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1677771858682},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677772052210},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1677772060461}],"contextDependencies":[],"result":["function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n// import Sortable from 'sortablejs'\n// import FileSaver from 'file-saver'\nexport default {\n  props: {\n    tableColumn: {\n      // 表头名称\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    tableData: {\n      // 表格数据\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    operate: {\n      // 自定义按键及绑定方法\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    customColumn: {\n      // 定制要展示的列\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    fixedLeftList: {\n      // 左侧固定列\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    fixedRightList: {\n      // 右侧固定列\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    type: {\n      // 是否开启表格多选\n      type: String,\n      default: null\n    },\n    index: {\n      // 是否显示索引\n      index: String,\n      default: ''\n    },\n    highlightCurrentRow: {\n      // 是否开启表格单选\n      type: Boolean,\n      default: false\n    },\n    loading: {\n      // 动画加载\n      type: Boolean,\n      default: false\n    },\n    loadingText: {\n      // 动画提示\n      type: String,\n      default: ''\n    },\n    loadingIcon: {\n      // 动画图标\n      type: String,\n      default: 'el-icon-loading'\n    },\n    loadingBG: {\n      // 动画背景色\n      type: String,\n      default: 'rgba(255,255,255,0.5)'\n    },\n    pagination: {\n      // 分页\n      type: [Object, Boolean],\n      default: false\n    },\n    border: {\n      // 边框\n      type: Boolean,\n      default: false\n    }\n  },\n  data: function data() {\n    return {\n      filterTableColumn: [],\n      // 定制展示的列\n      currentPage: 1,\n      // 当前选中页\n      currentData: [],\n      // 每次切换页码的时候要给table传入不同的数据\n      selectedTableData: [],\n      // 多选选中的数据\n      currentRow: null,\n      // 单选选中的数据\n      oldVal: [],\n      // 上一次选中的数据\n      oldKey: [],\n      // 上一次选中数据的key\n      currentIndex: 1,\n      // 当前索引，切换页面的时候需要重新计算\n      rowClassName: '' // 行样式\n\n    };\n  },\n  created: function created() {},\n  beforeMount: function beforeMount() {\n    // 先放在session里，因为每次切换页码table都会重新渲染，之前选中都数据就丢失了  sessionstorage在create里面打包会提示undefined\n    sessionStorage.setItem('selectedTableData', JSON.stringify([]));\n  },\n  methods: {\n    // 开发者自定义的函数\n    buttonMethods: function buttonMethods(func, index, row) {\n      var _this = this;\n\n      var methods = this.$options.methods;\n      methods[func](_this, index, row);\n    },\n    // 行内编辑\n    handleEdit: function handleEdit(_this, index, row) {\n      _this.$emit('handleEdit', {\n        index: index,\n        row: row\n      });\n    },\n    // 行内删除\n    handleDelete: function handleDelete(_this, index, row) {\n      _this.$emit('handleDelete', {\n        index: index,\n        row: row\n      });\n    },\n    // 行内跳转页面\n    goToGroupEditPage: function goToGroupEditPage(_this, index, row) {\n      _this.$emit('goToGroupEditPage', {\n        index: index,\n        row: row\n      });\n    },\n    // 多选-选中checkbox\n    toggleSelection: function toggleSelection(rows, flag) {\n      var _this2 = this;\n\n      if (rows) {\n        rows.forEach(function (row) {\n          _this2.$refs.linTable.toggleRowSelection(row, flag);\n        });\n      } else {\n        this.$refs.linTable.clearSelection();\n      }\n    },\n    // 全选-取消全选\n    selectAll: function selectAll(val) {\n      this.oldKey = val.map(function (item) {\n        return item.key;\n      });\n    },\n    // 单选\n    handleCurrentChange: function handleCurrentChange(val, oldVal) {\n      this.currentRow = val;\n      this.$emit('handleCurrentChange', {\n        val: val,\n        oldVal: oldVal\n      });\n    },\n    // 单击某一行\n    rowClick: function rowClick(row) {\n      // eslint-disable-line\n      // 选中-多选\n      if (!this.oldKey.includes(row.key)) {\n        this.oldKey.push(row.key);\n        var data = this.oldVal.concat(row);\n        this.handleSelectionChange(data); // 选中checkbox\n\n        this.toggleSelection(this.currentData.filter(function (item) {\n          return item.key === row.key;\n        })); // 取消选中\n      } else {\n        this.oldKey = this.oldKey.filter(function (item) {\n          return item !== row.key;\n        });\n\n        var _data = this.oldVal.filter(function (item) {\n          return item.key !== row.key;\n        });\n\n        this.handleSelectionChange(_data);\n        this.toggleSelection(this.currentData.filter(function (item) {\n          return item.key === row.key;\n        }), false);\n      } // 选中-单选\n\n\n      if (this.currentOldRow && this.currentOldRow.key === row.key) {\n        // 取消单选选中\n        this.$refs.linTable.setCurrentRow();\n        this.currentOldRow = null;\n        return;\n      }\n\n      this.currentOldRow = row;\n    },\n    // 切换当前页\n    currentChange: function currentChange(page) {\n      var _this3 = this;\n\n      var currentSelectedData = [];\n      this.oldVal = [];\n      this.currentPage = page;\n      this.selectedTableData = JSON.parse(sessionStorage.getItem('selectedTableData'));\n      this.currentData = this.tableData.filter(function (item, index) {\n        return index >= (_this3.currentPage - 1) * _this3.pagination.pageSize && index < _this3.currentPage * _this3.pagination.pageSize;\n      }); // eslint-disable-line\n\n      this.$emit('currentChange', page); // 已选中的数据打勾\n\n      this.selectedTableData.forEach(function (item) {\n        for (var i = 0; i < _this3.currentData.length; i++) {\n          if (_this3.currentData[i].key === item.key) {\n            // 切换页码重新计算oldVal\n            _this3.oldVal.push(_this3.currentData[i]); // 需要打勾的数据\n\n\n            currentSelectedData.push(_this3.currentData[i]);\n          }\n        }\n      });\n      this.$nextTick(function () {\n        _this3.toggleSelection(currentSelectedData);\n      }); // 切换行索引\n\n      this.currentIndex = (this.currentPage - 1) * this.pagination.pageSize + 1;\n    },\n    // checkbox触发函数\n    handleSelectionChange: function handleSelectionChange(val) {\n      var valKeys = val.map(function (item) {\n        return item.key;\n      });\n      var oldValKeys = this.oldVal.map(function (item) {\n        return item.key;\n      });\n      this.selectedTableData = JSON.parse(sessionStorage.getItem('selectedTableData')); // 一条数据都没选中\n\n      if (this.selectedTableData.length === 0) {\n        this.selectedTableData = this.selectedTableData.concat(val);\n        this.$emit('selection-change', this.selectedTableData);\n        this.oldVal = _toConsumableArray(val);\n        sessionStorage.setItem('selectedTableData', JSON.stringify(this.selectedTableData));\n        return;\n      } // 判断是选中数据还是取消选中\n\n\n      if (valKeys.length < oldValKeys.length) {\n        var delKey = oldValKeys.filter(function (item) {\n          return !valKeys.includes(item);\n        });\n        this.selectedTableData = this.selectedTableData.filter(function (item) {\n          return !delKey.includes(item.key);\n        });\n        this.$emit('selection-change', this.selectedTableData);\n      } else {\n        var addKey = valKeys.filter(function (item) {\n          return !oldValKeys.includes(item);\n        });\n        var addVal = val.filter(function (item) {\n          return addKey.includes(item.key);\n        });\n        this.selectedTableData = this.selectedTableData.concat(addVal);\n        this.$emit('selection-change', this.selectedTableData);\n      }\n\n      sessionStorage.setItem('selectedTableData', JSON.stringify(this.selectedTableData));\n      this.oldVal = _toConsumableArray(val);\n    } // 拖拽\n    // setDrag() {\n    //   const el = document.querySelectorAll('.el-table__body-wrapper > table > tbody')[0]\n    //   this.rowClassName = 'rowClassName' // 设置行样式，添加移动手势\n    //   this.sortable = Sortable.create(el, {\n    //     setData(dataTransfer) {\n    //       dataTransfer.setData('Text', '')\n    //     },\n    //     onEnd: (evt) => {\n    //       const dragData = [...this.currentData]\n    //       let { oldIndex, newIndex } = evt\n    //       if (this.pagination) {\n    //         oldIndex = evt.oldIndex * this.currentPage\n    //         newIndex = evt.newIndex * this.currentPage\n    //       }\n    //       dragData[oldIndex] = this.currentData[newIndex]\n    //       dragData[newIndex] = this.currentData[oldIndex]\n    //       this.$emit('getDragData', { dragData, oldIndex, newIndex })\n    //     },\n    //   })\n    // },\n    // 导出excel\n    // exportExcel(fileName = 'sheet') {\n    //   const targetTable = this.$XLSX.utils.table_to_book(document.querySelectorAll('.el-table__body-wrapper > table')[0])\n    //   const writeTable = this.$XLSX.write(targetTable, { bookType: 'xlsx', bookSST: true, type: 'array' })\n    //   try {\n    //     FileSaver.saveAs(new Blob([writeTable], { type: 'application/octet-stream' }), `${fileName}.xlsx`)\n    //   } catch (e) { if (typeof console !== 'undefined') console.log(e, writeTable) }\n    //   return writeTable\n    // },\n    // 导出csv\n    // exportCsv(fileName = 'sheet') {\n    //   const targetTable = this.$XLSX.utils.table_to_book(document.querySelectorAll('.el-table__body-wrapper > table')[0])\n    //   const writeTable = this.$XLSX.write(targetTable, { bookType: 'csv', bookSST: true, type: 'array' })\n    //   try {\n    //     FileSaver.saveAs(new Blob([writeTable], { type: 'application/octet-stream' }), `${fileName}.csv`)\n    //   } catch (e) { if (typeof console !== 'undefined') console.log(e, writeTable) }\n    //   return writeTable\n    // },\n\n  },\n  watch: {\n    fixedLeftList: {\n      handler: function handler() {\n        var _this4 = this;\n\n        // eslint-disable-line\n        this.filterTableColumn.map(function (item, index) {\n          if (_this4.fixedLeftList.indexOf(item.label) > -1) {\n            _this4.$set(_this4.filterTableColumn[index], 'fixed', 'left');\n          } else if (_this4.fixedRightList.indexOf(item.label) === -1) {\n            _this4.$set(_this4.filterTableColumn[index], 'fixed', false);\n          }\n\n          return '';\n        });\n      },\n      deep: true,\n      immediate: true\n    },\n    fixedRightList: {\n      handler: function handler() {\n        var _this5 = this;\n\n        // eslint-disable-line\n        this.filterTableColumn.map(function (item, index) {\n          if (_this5.fixedRightList.indexOf(item.label) > -1) {\n            _this5.$set(_this5.filterTableColumn[index], 'fixed', 'right');\n          } else if (_this5.fixedLeftList.indexOf(item.label) === -1) {\n            _this5.$set(_this5.filterTableColumn[index], 'fixed', false);\n          }\n\n          return '';\n        });\n      },\n      deep: true,\n      immediate: true\n    },\n    customColumn: {\n      handler: function handler(val) {\n        if (val.length > 1) {\n          this.filterTableColumn = this.tableColumn.filter(function (v) {\n            return val.indexOf(v.label) > -1;\n          });\n        }\n      },\n      deep: true\n    },\n    tableData: {\n      handler: function handler() {\n        var _this6 = this;\n\n        // 传了分页配置\n        if (this.pagination && this.pagination.pageSize) {\n          this.currentData = this.tableData.filter(function (item, index) {\n            return index < _this6.pagination.pageSize;\n          });\n        } else {\n          this.currentData = this.tableData;\n        }\n      },\n      deep: true,\n      immediate: true\n    },\n    tableColumn: {\n      handler: function handler() {\n        var _this7 = this;\n\n        // 如果一开始没有传要展示的列 就默认全展示\n        if (this.customColumn.length > 1) {\n          this.filterTableColumn = this.tableColumn.filter(function (v) {\n            return _this7.customColumn.indexOf(v.label) > -1;\n          });\n        } else {\n          this.filterTableColumn = this.tableColumn;\n        }\n      },\n      deep: true,\n      immediate: true\n    }\n  }\n};",{"version":3,"mappings":"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AACA;AAAA;AAAA;AACA;AACA;AACA;;AACAA;AACA;AACA,KAzHA,CA0HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAhKA,GAhGA;AAkQAoB;AACA1C;AACA2C,aADA,qBACA;AAAA;;AACA;AACA;AACA;AACA;AACA,WAFA,MAEA;AACA;AACA;;AACA;AACA,SAPA;AAQA,OAXA;AAYAC,gBAZA;AAaAC;AAbA,KADA;AAgBA5C;AACA0C,aADA,qBACA;AAAA;;AACA;AACA;AACA;AACA;AACA,WAFA,MAEA;AACA;AACA;;AACA;AACA,SAPA;AAQA,OAXA;AAYAC,gBAZA;AAaAC;AAbA,KAhBA;AA+BA9C;AACA4C,aADA,mBACAR,GADA,EACA;AACA;AACA;AAAA;AAAA;AACA;AACA,OALA;AAMAS;AANA,KA/BA;AAuCA/C;AACA8C,aADA,qBACA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA,SAFA,MAEA;AACA;AACA;AACA,OARA;AASAC,gBATA;AAUAC;AAVA,KAvCA;AAmDAnD;AACAiD,aADA,qBACA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AACA,SAFA,MAEA;AACA;AACA;AACA,OARA;AASAC,gBATA;AAUAC;AAVA;AAnDA;AAlQA","names":["props","tableColumn","type","default","tableData","operate","customColumn","fixedLeftList","fixedRightList","index","highlightCurrentRow","loading","loadingText","loadingIcon","loadingBG","pagination","border","data","filterTableColumn","currentPage","currentData","selectedTableData","currentRow","oldVal","oldKey","currentIndex","rowClassName","created","beforeMount","sessionStorage","methods","buttonMethods","func","row","handleEdit","_this","handleDelete","goToGroupEditPage","toggleSelection","rows","flag","selectAll","val","handleCurrentChange","rowClick","currentChange","page","currentSelectedData","handleSelectionChange","watch","handler","deep","immediate"],"sourceRoot":"src/component/base/table","sources":["lin-table.vue"],"sourcesContent":["<template>\n  <div class=\"lin-table\">\n    <el-table\n      ref=\"linTable\"\n      v-loading=\"loading\"\n      stripe\n      row-key=\"id\"\n      :border=\"border\"\n      :data=\"currentData\"\n      :highlight-current-row=\"highlightCurrentRow ? true : false\"\n      :element-loading-text=\"loadingText\"\n      :element-loading-spinner=\"loadingIcon\"\n      :element-loading-background=\"loadingBG\"\n      :row-class-name=\"rowClassName\"\n      @current-change=\"handleCurrentChange\"\n      @selection-change=\"handleSelectionChange\"\n      @select-all=\"selectAll\"\n      @row-click=\"rowClick\"\n    >\n      <el-table-column v-if=\"type\" :type=\"type\" width=\"55\"></el-table-column>\n      <el-table-column v-if=\"index\" :type=\"index\" :index=\"currentIndex\" width=\"55\"></el-table-column>\n      <el-table-column\n        v-for=\"item in filterTableColumn\"\n        :key=\"item.id\"\n        :prop=\"item.prop\"\n        :label=\"item.label\"\n        :show-overflow-tooltip=\"true\"\n        :filters=\"item.filters ? item.filters : null\"\n        :filter-method=\"item.filterMethod ? item.filterMethod : null\"\n        :column-key=\"item.filterMethod ? item.prop : null\"\n        :formatter=\"item.formatter ? item.formatter : null\"\n        :sortable=\"item.sortable ? item.sortable : false\"\n        :fixed=\"item.fixed ? item.fixed : false\"\n        :width=\"item.width ? item.width : ''\"\n      ></el-table-column>\n      <el-table-column v-if=\"operate.length > 0\" label=\"操作\" fixed=\"right\" width=\"275\">\n        <template slot-scope=\"scope\">\n          <el-button\n            v-for=\"(item, index) in operate\"\n            :type=\"item.type\"\n            plain\n            :key=\"index\"\n            size=\"mini\"\n            v-permission=\"{ permission: item.permission ? item.permission : '', type: 'disabled' }\"\n            @click.native.prevent.stop=\"buttonMethods(item.func, scope.$index, scope.row)\"\n          >{{ item.name }}</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <el-pagination\n      class=\"pagination\"\n      v-if=\"pagination\"\n      background\n      layout=\"prev, pager, next\"\n      :page-size=\"pagination.pageSize ? pagination.pageSize : 10\"\n      :total=\"pagination.pageTotal ? pagination.pageTotal : null\"\n      :current-page=\"pagination.currentPage ? pagination.currentPage : 1\"\n      @current-change=\"currentChange\"\n    ></el-pagination>\n  </div>\n</template>\n\n<script>\n// import Sortable from 'sortablejs'\n// import FileSaver from 'file-saver'\n\nexport default {\n  props: {\n    tableColumn: {\n      // 表头名称\n      type: Array,\n      default: () => [],\n    },\n    tableData: {\n      // 表格数据\n      type: Array,\n      default: () => [],\n    },\n    operate: {\n      // 自定义按键及绑定方法\n      type: Array,\n      default: () => [],\n    },\n    customColumn: {\n      // 定制要展示的列\n      type: Array,\n      default: () => [],\n    },\n    fixedLeftList: {\n      // 左侧固定列\n      type: Array,\n      default: () => [],\n    },\n    fixedRightList: {\n      // 右侧固定列\n      type: Array,\n      default: () => [],\n    },\n    type: {\n      // 是否开启表格多选\n      type: String,\n      default: null,\n    },\n    index: {\n      // 是否显示索引\n      index: String,\n      default: '',\n    },\n    highlightCurrentRow: {\n      // 是否开启表格单选\n      type: Boolean,\n      default: false,\n    },\n    loading: {\n      // 动画加载\n      type: Boolean,\n      default: false,\n    },\n    loadingText: {\n      // 动画提示\n      type: String,\n      default: '',\n    },\n    loadingIcon: {\n      // 动画图标\n      type: String,\n      default: 'el-icon-loading',\n    },\n    loadingBG: {\n      // 动画背景色\n      type: String,\n      default: 'rgba(255,255,255,0.5)',\n    },\n    pagination: {\n      // 分页\n      type: [Object, Boolean],\n      default: false,\n    },\n    border: {\n      // 边框\n      type: Boolean,\n      default: false,\n    },\n  },\n  data() {\n    return {\n      filterTableColumn: [], // 定制展示的列\n      currentPage: 1, // 当前选中页\n      currentData: [], // 每次切换页码的时候要给table传入不同的数据\n      selectedTableData: [], // 多选选中的数据\n      currentRow: null, // 单选选中的数据\n      oldVal: [], // 上一次选中的数据\n      oldKey: [], // 上一次选中数据的key\n      currentIndex: 1, // 当前索引，切换页面的时候需要重新计算\n      rowClassName: '', // 行样式\n    }\n  },\n  created() { },\n  beforeMount() {\n    // 先放在session里，因为每次切换页码table都会重新渲染，之前选中都数据就丢失了  sessionstorage在create里面打包会提示undefined\n    sessionStorage.setItem('selectedTableData', JSON.stringify([]))\n  },\n  methods: {\n    // 开发者自定义的函数\n    buttonMethods(func, index, row) {\n      const _this = this\n      const { methods } = this.$options\n      methods[func](_this, index, row)\n    },\n    // 行内编辑\n    handleEdit(_this, index, row) {\n      _this.$emit('handleEdit', { index, row })\n    },\n    // 行内删除\n    handleDelete(_this, index, row) {\n      _this.$emit('handleDelete', { index, row })\n    },\n    // 行内跳转页面\n    goToGroupEditPage(_this, index, row) {\n      _this.$emit('goToGroupEditPage', { index, row })\n    },\n    // 多选-选中checkbox\n    toggleSelection(rows, flag) {\n      if (rows) {\n        rows.forEach(row => {\n          this.$refs.linTable.toggleRowSelection(row, flag)\n        })\n      } else {\n        this.$refs.linTable.clearSelection()\n      }\n    },\n    // 全选-取消全选\n    selectAll(val) {\n      this.oldKey = val.map(item => item.key)\n    },\n    // 单选\n    handleCurrentChange(val, oldVal) {\n      this.currentRow = val\n      this.$emit('handleCurrentChange', { val, oldVal })\n    },\n    // 单击某一行\n    rowClick(row) {\n      // eslint-disable-line\n      // 选中-多选\n      if (!this.oldKey.includes(row.key)) {\n        this.oldKey.push(row.key)\n        const data = this.oldVal.concat(row)\n        this.handleSelectionChange(data)\n        // 选中checkbox\n        this.toggleSelection(this.currentData.filter(item => item.key === row.key))\n        // 取消选中\n      } else {\n        this.oldKey = this.oldKey.filter(item => item !== row.key)\n        const data = this.oldVal.filter(item => item.key !== row.key)\n        this.handleSelectionChange(data)\n        this.toggleSelection(\n          this.currentData.filter(item => item.key === row.key),\n          false,\n        )\n      }\n      // 选中-单选\n      if (this.currentOldRow && this.currentOldRow.key === row.key) {\n        // 取消单选选中\n        this.$refs.linTable.setCurrentRow()\n        this.currentOldRow = null\n        return\n      }\n      this.currentOldRow = row\n    },\n    // 切换当前页\n    currentChange(page) {\n      const currentSelectedData = []\n      this.oldVal = []\n      this.currentPage = page\n      this.selectedTableData = JSON.parse(sessionStorage.getItem('selectedTableData'))\n      this.currentData = this.tableData.filter(\n        (item, index) => index >= (this.currentPage - 1) * this.pagination.pageSize\n          && index < this.currentPage * this.pagination.pageSize,\n      ) // eslint-disable-line\n      this.$emit('currentChange', page)\n      // 已选中的数据打勾\n      this.selectedTableData.forEach(item => {\n        for (let i = 0; i < this.currentData.length; i++) {\n          if (this.currentData[i].key === item.key) {\n            // 切换页码重新计算oldVal\n            this.oldVal.push(this.currentData[i])\n            // 需要打勾的数据\n            currentSelectedData.push(this.currentData[i])\n          }\n        }\n      })\n      this.$nextTick(() => {\n        this.toggleSelection(currentSelectedData)\n      })\n      // 切换行索引\n      this.currentIndex = (this.currentPage - 1) * this.pagination.pageSize + 1\n    },\n    // checkbox触发函数\n    handleSelectionChange(val) {\n      const valKeys = val.map(item => item.key)\n      const oldValKeys = this.oldVal.map(item => item.key)\n      this.selectedTableData = JSON.parse(sessionStorage.getItem('selectedTableData'))\n      // 一条数据都没选中\n      if (this.selectedTableData.length === 0) {\n        this.selectedTableData = this.selectedTableData.concat(val)\n        this.$emit('selection-change', this.selectedTableData)\n        this.oldVal = [...val]\n        sessionStorage.setItem('selectedTableData', JSON.stringify(this.selectedTableData))\n        return\n      }\n      // 判断是选中数据还是取消选中\n      if (valKeys.length < oldValKeys.length) {\n        const delKey = oldValKeys.filter(item => !valKeys.includes(item))\n        this.selectedTableData = this.selectedTableData.filter(item => !delKey.includes(item.key))\n        this.$emit('selection-change', this.selectedTableData)\n      } else {\n        const addKey = valKeys.filter(item => !oldValKeys.includes(item))\n        const addVal = val.filter(item => addKey.includes(item.key))\n        this.selectedTableData = this.selectedTableData.concat(addVal)\n        this.$emit('selection-change', this.selectedTableData)\n      }\n      sessionStorage.setItem('selectedTableData', JSON.stringify(this.selectedTableData))\n      this.oldVal = [...val]\n    },\n    // 拖拽\n    // setDrag() {\n    //   const el = document.querySelectorAll('.el-table__body-wrapper > table > tbody')[0]\n    //   this.rowClassName = 'rowClassName' // 设置行样式，添加移动手势\n    //   this.sortable = Sortable.create(el, {\n    //     setData(dataTransfer) {\n    //       dataTransfer.setData('Text', '')\n    //     },\n    //     onEnd: (evt) => {\n    //       const dragData = [...this.currentData]\n    //       let { oldIndex, newIndex } = evt\n    //       if (this.pagination) {\n    //         oldIndex = evt.oldIndex * this.currentPage\n    //         newIndex = evt.newIndex * this.currentPage\n    //       }\n    //       dragData[oldIndex] = this.currentData[newIndex]\n    //       dragData[newIndex] = this.currentData[oldIndex]\n    //       this.$emit('getDragData', { dragData, oldIndex, newIndex })\n    //     },\n    //   })\n    // },\n    // 导出excel\n    // exportExcel(fileName = 'sheet') {\n    //   const targetTable = this.$XLSX.utils.table_to_book(document.querySelectorAll('.el-table__body-wrapper > table')[0])\n    //   const writeTable = this.$XLSX.write(targetTable, { bookType: 'xlsx', bookSST: true, type: 'array' })\n    //   try {\n    //     FileSaver.saveAs(new Blob([writeTable], { type: 'application/octet-stream' }), `${fileName}.xlsx`)\n    //   } catch (e) { if (typeof console !== 'undefined') console.log(e, writeTable) }\n    //   return writeTable\n    // },\n    // 导出csv\n    // exportCsv(fileName = 'sheet') {\n    //   const targetTable = this.$XLSX.utils.table_to_book(document.querySelectorAll('.el-table__body-wrapper > table')[0])\n    //   const writeTable = this.$XLSX.write(targetTable, { bookType: 'csv', bookSST: true, type: 'array' })\n    //   try {\n    //     FileSaver.saveAs(new Blob([writeTable], { type: 'application/octet-stream' }), `${fileName}.csv`)\n    //   } catch (e) { if (typeof console !== 'undefined') console.log(e, writeTable) }\n    //   return writeTable\n    // },\n  },\n  watch: {\n    fixedLeftList: {\n      handler() {\n        // eslint-disable-line\n        this.filterTableColumn.map((item, index) => {\n          if (this.fixedLeftList.indexOf(item.label) > -1) {\n            this.$set(this.filterTableColumn[index], 'fixed', 'left')\n          } else if (this.fixedRightList.indexOf(item.label) === -1) {\n            this.$set(this.filterTableColumn[index], 'fixed', false)\n          }\n          return ''\n        })\n      },\n      deep: true,\n      immediate: true,\n    },\n    fixedRightList: {\n      handler() {\n        // eslint-disable-line\n        this.filterTableColumn.map((item, index) => {\n          if (this.fixedRightList.indexOf(item.label) > -1) {\n            this.$set(this.filterTableColumn[index], 'fixed', 'right')\n          } else if (this.fixedLeftList.indexOf(item.label) === -1) {\n            this.$set(this.filterTableColumn[index], 'fixed', false)\n          }\n          return ''\n        })\n      },\n      deep: true,\n      immediate: true,\n    },\n    customColumn: {\n      handler(val) {\n        if (val.length > 1) {\n          this.filterTableColumn = this.tableColumn.filter(v => val.indexOf(v.label) > -1)\n        }\n      },\n      deep: true,\n    },\n    tableData: {\n      handler() {\n        // 传了分页配置\n        if (this.pagination && this.pagination.pageSize) {\n          this.currentData = this.tableData.filter((item, index) => index < this.pagination.pageSize)\n        } else {\n          this.currentData = this.tableData\n        }\n      },\n      deep: true,\n      immediate: true,\n    },\n    tableColumn: {\n      handler() {\n        // 如果一开始没有传要展示的列 就默认全展示\n        if (this.customColumn.length > 1) {\n          this.filterTableColumn = this.tableColumn.filter(v => this.customColumn.indexOf(v.label) > -1)\n        } else {\n          this.filterTableColumn = this.tableColumn\n        }\n      },\n      deep: true,\n      immediate: true,\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.lin-table {\n  position: relative;\n}\n\n.sort-input {\n  width: 50px;\n  background: none;\n  justify-content: space-around;\n}\n\n.table-edit {\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  width: 135px;\n}\n\n.cell-edit-input .el-input,\n.el-input__inner {\n  width: 125px;\n}\n\n.cell-icon {\n  cursor: pointer;\n  color: #3963bc;\n  margin-left: 5px;\n}\n\n.pagination {\n  display: flex;\n  justify-content: flex-end;\n  margin-right: -10px;\n  margin-top: 15px;\n}\n</style>\n\n<style>\n.lin-table .rowClassName {\n  cursor: move !important;\n}\n</style>\n"]}]}