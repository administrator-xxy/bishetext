{"remainingRequest":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\src\\view\\about\\about.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\src\\view\\about\\about.vue","mtime":1656036094000},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\babel.config.js","mtime":1656036094000},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677772052210},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\babel-loader\\lib\\index.js","mtime":1677771858682},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1677772052210},{"path":"C:\\Users\\Hacker\\Desktop\\zhaop\\resume-master\\resume-master\\recruit-system\\recruit-web\\node_modules\\vue-loader\\lib\\index.js","mtime":1677772060461}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"C:\\\\Users\\\\Hacker\\\\Desktop\\\\zhaop\\\\resume-master\\\\resume-master\\\\recruit-system\\\\recruit-web\\\\node_modules\\\\@babel\\\\runtime\\\\regenerator\\\\index.js\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport LinSearch from '@/component/base/search/lin-search';\nimport { Position } from '@/model/position';\nimport { Application } from '@/model/application';\nimport { Resume } from '@/model/resume';\nimport { Favor } from '@/model/favor';\nimport PositionDetail from '@/view/position/position-detail';\nimport HotPosition from '@/view/position/hot-position';\nexport default {\n  components: {\n    LinSearch: LinSearch,\n    PositionDetail: PositionDetail,\n    HotPosition: HotPosition\n  },\n  data: function data() {\n    return {\n      showDetail: false,\n      // 是否显示职位详情页\n      showHot: false,\n      // 是否显示热招职位列表\n      tableData: [],\n      // 表格数据\n      totalNums: 0,\n      // 数据总数\n      currentPage: 1,\n      // 当前页数\n      pageCount: 10,\n      // 每页的数据量\n      refreshPagination: true,\n      // 页数增加的时候，因为缓存的缘故，需要刷新 Pagination 组件\n      detailPositionID: 0,\n      // 职位id\n      searchKeyword: '',\n      // 搜索时输入的关键字\n      keyword: null,\n      // 查询关键字,用于显示搜索提示\n      form: {},\n      //投递简历时传入的列表数据\n      list: {} //收藏职位时传入的列表数据\n\n    };\n  },\n  created: function () {\n    var _created = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.loading = true;\n              this.getByState();\n              this.loading = false;\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    function created() {\n      return _created.apply(this, arguments);\n    }\n\n    return created;\n  }(),\n  watch: {\n    /**\n     * 关键字搜索\n     */\n    searchKeyword: function searchKeyword(newVal) {\n      if (newVal) {\n        this.keyword = newVal;\n\n        if (this.searchUser) {\n          this.keyword = \"\".concat(newVal);\n        }\n      } else {\n        this.keyword = '';\n        this.$refs.searchKeyword.clear();\n      }\n\n      this.searchPositionList();\n    }\n  },\n  methods: {\n    getByState: function () {\n      var _getByState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var page, count, positions;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                page = this.currentPage - 1;\n                count = this.pageCount; // 首页展示所有审核通过的职位\n\n                _context2.next = 4;\n                return Position.getByState(1, page, count);\n\n              case 4:\n                positions = _context2.sent;\n                this.tableData = positions.items;\n                this.totalNums = positions.total;\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n\n      function getByState() {\n        return _getByState.apply(this, arguments);\n      }\n\n      return getByState;\n    }(),\n    // 通过查询关键字分页搜索职位列表 \n    searchPositionList: function () {\n      var _searchPositionList = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var page, count, positions;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                page = this.currentPage - 1;\n                count = this.pageCount;\n                _context3.next = 4;\n                return Position.getByKeyword(page, count, this.searchKeyword);\n\n              case 4:\n                positions = _context3.sent;\n                this.tableData = positions.items;\n                this.totalNums = positions.total;\n\n              case 7:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function searchPositionList() {\n        return _searchPositionList.apply(this, arguments);\n      }\n\n      return searchPositionList;\n    }(),\n    // 清空检索\n    backInit: function () {\n      var _backInit = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.searchKeyword = '';\n                this.keyword = '';\n                this.tableData = [];\n                this.loading = true;\n                this.getByState();\n                this.loading = false;\n\n              case 6:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function backInit() {\n        return _backInit.apply(this, arguments);\n      }\n\n      return backInit;\n    }(),\n\n    /**\n     * 监听输入查询关键字\n     */\n    onQueryChange: function () {\n      var _onQueryChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(query) {\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.searchKeyword = query.trim();\n\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function onQueryChange(_x) {\n        return _onQueryChange.apply(this, arguments);\n      }\n\n      return onQueryChange;\n    }(),\n    // 切换table页\n    handleCurrentChange: function () {\n      var _handleCurrentChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(val) {\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                this.currentPage = val;\n                this.loading = true;\n                this.getByState();\n                this.loading = false;\n\n              case 4:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this);\n      }));\n\n      function handleCurrentChange(_x2) {\n        return _handleCurrentChange.apply(this, arguments);\n      }\n\n      return handleCurrentChange;\n    }(),\n    handleDetail: function handleDetail(val) {\n      this.showDetail = true;\n      this.detailPositionID = val.id;\n    },\n    handleHot: function handleHot() {\n      this.showHot = true;\n    },\n    rowClick: function rowClick() {},\n    detailClose: function detailClose() {\n      this.showDetail = false;\n      this.getByState();\n    },\n    hotClose: function hotClose() {\n      this.showHot = false;\n      this.showDetail = false;\n      this.getByState();\n    },\n    // 投递简历\n    handleDelivery: function () {\n      var _handleDelivery = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(val) {\n        var flag, temp, result, res;\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return Application.getByPositionIdAndUserId(val.id, this.$store.getters.user.id);\n\n              case 2:\n                flag = _context7.sent;\n\n                if (!(flag === false)) {\n                  _context7.next = 7;\n                  break;\n                }\n\n                // 不能重复投递\n                this.$message.error(\"你已投递过该职位，不可重复投递\");\n                _context7.next = 23;\n                break;\n\n              case 7:\n                // 获取当前登录求职者的用户id\n                this.form.user_id = this.$store.getters.user.id; // 获取当前投递简历的职位id\n\n                this.form.position_id = val.id; // 根据用户id查询绑定的简历id\n\n                _context7.next = 11;\n                return Resume.getByUserId(this.$store.getters.user.id);\n\n              case 11:\n                temp = _context7.sent;\n                this.form.resume_id = temp.resume_id;\n                console.log(temp); // 根据职位id查询该职位所对应的hr_id\n\n                _context7.next = 16;\n                return Position.getById(val.id);\n\n              case 16:\n                result = _context7.sent;\n                this.form.hr_id = result.hr_id;\n                this.form.company_id = val.company_id; // 调用创建申请的方法\n\n                _context7.next = 21;\n                return Application.create(this.form);\n\n              case 21:\n                res = _context7.sent;\n\n                if (res.code < window.MAX_SUCCESS_CODE) {\n                  this.$message.success(\"\".concat(res.message));\n                }\n\n              case 23:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function handleDelivery(_x3) {\n        return _handleDelivery.apply(this, arguments);\n      }\n\n      return handleDelivery;\n    }(),\n    // 收藏职位\n    handleCollect: function () {\n      var _handleCollect = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(val) {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                // 获取当前登录求职者的用户id\n                this.list.user_id = this.$store.getters.user.id; // 获取当前收藏的职位id\n\n                this.list.position_id = val.id; // 调用添加收藏的方法\n\n                _context8.next = 4;\n                return Favor.create(this.list);\n\n              case 4:\n                res = _context8.sent;\n\n                if (res.code < window.MAX_SUCCESS_CODE) {\n                  this.$message.success(\"\".concat(res.message));\n                }\n\n              case 6:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, this);\n      }));\n\n      function handleCollect(_x4) {\n        return _handleCollect.apply(this, arguments);\n      }\n\n      return handleCollect;\n    }()\n  }\n};",{"version":3,"mappings":"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","names":["components","LinSearch","PositionDetail","HotPosition","data","showDetail","showHot","tableData","totalNums","currentPage","pageCount","refreshPagination","detailPositionID","searchKeyword","keyword","form","list","created","watch","newVal","methods","getByState","page","count","Position","positions","searchPositionList","backInit","onQueryChange","query","handleCurrentChange","val","handleDetail","handleHot","rowClick","detailClose","hotClose","handleDelivery","Application","flag","Resume","temp","console","result","res","handleCollect","Favor"],"sourceRoot":"src/view/about","sources":["about.vue"],"sourcesContent":["<template>\n  <div class=\"container\" v-if=\"!showDetail && !showHot\">\n    <div class=\"header\">\n      <div class=\"title\">欢迎使用企业员工招聘系统系统</div>\n    </div>\n    <!-- 搜索框 -->\n    <div class=\"box\">\n      <div class=\"left\">\n        <lin-search @query=\"onQueryChange\" placeholder=\"请输入职位名称\" ref=\"searchKeyword\" />\n      </div>\n      <div class=\"right\" @click.prevent=\"handleHot()\">热门职位推荐</div>\n    </div>\n    <transition name=\"fade\">\n      <div class=\"search\" v-if=\"keyword\">\n        <p class=\"search-tip\">\n          搜索“\n          <span class=\"search-keyword\">{{ keyword }}</span>”, 找到\n          <span class=\"search-num\">{{ totalNums }}</span> 条职位信息\n        </p>\n        <button class=\"search-back\" @click=\"backInit\">返回全部职位</button>\n      </div>\n    </transition>\n    <!-- 职位列表 -->\n    <el-table stripe v-loading=\"loading\" :data=\"tableData\">\n      <el-table-column prop=\"title\" label=\"职位名称\" width=\"250\"></el-table-column>\n      <el-table-column prop=\"city\" label=\"工作地点\" width=\"250\"></el-table-column>\n      <el-table-column prop=\"salary_down,salary_up\" label=\"薪资\" width=\"250\">\n        <template slot-scope=\"scope\">{{ scope.row.salary_down }}-{{ scope.row.salary_up }}</template>\n      </el-table-column>\n      <el-table-column prop=\"quantity\" label=\"招聘人数\" width=\"250\"></el-table-column>\n      <el-table-column fixed=\"right\" label=\"操作\">\n        <template slot-scope=\"scope\">\n          <el-button @click.prevent=\"handleDetail(scope.row)\" type=\"primary\" plain size=\"mini\">查看</el-button>\n          <el-button @click.prevent=\"handleDelivery(scope.row)\" v-permission=\"{ permission: '投递简历' }\" type=\"success\"\n            plain size=\"mini\">投递简历</el-button>\n          <el-button @click.prevent=\"handleCollect(scope.row)\" v-permission=\"{ permission: '添加收藏' }\" type=\"info\" plain\n            size=\"mini\">收藏职位</el-button>\n        </template>\n      </el-table-column>\n    </el-table>\n    <div class=\"pagination\">\n      <el-pagination @current-change=\"handleCurrentChange\" :background=\"true\" :page-size=\"pageCount\"\n        :current-page=\"currentPage\" v-if=\"refreshPagination\" layout=\"prev, pager, next, jumper\" :total=\"totalNums\">\n      </el-pagination>\n    </div>\n  </div>\n  <!-- 职位详情 -->\n  <position-detail v-else-if=\"showDetail && !showHot\" @detailClose=\"detailClose\" :detailPositionID=\"detailPositionID\"\n    :temp=\"1\"></position-detail>\n  <!-- 热招职位 -->\n  <hot-position v-else @hotClose=\"hotClose\"></hot-position>\n</template>\n\n<script>\nimport LinSearch from '@/component/base/search/lin-search'\nimport { Position } from '@/model/position'\nimport { Application } from '@/model/application'\nimport { Resume } from '@/model/resume'\nimport { Favor } from '@/model/favor'\nimport PositionDetail from '@/view/position/position-detail'\nimport HotPosition from '@/view/position/hot-position'\n\nexport default {\n  components: {\n    LinSearch,\n    PositionDetail,\n    HotPosition,\n  },\n  data() {\n    return {\n      showDetail: false, // 是否显示职位详情页\n      showHot: false, // 是否显示热招职位列表\n      tableData: [], // 表格数据\n      totalNums: 0, // 数据总数\n      currentPage: 1, // 当前页数\n      pageCount: 10, // 每页的数据量\n      refreshPagination: true, // 页数增加的时候，因为缓存的缘故，需要刷新 Pagination 组件\n      detailPositionID: 0, // 职位id\n      searchKeyword: '', // 搜索时输入的关键字\n      keyword: null, // 查询关键字,用于显示搜索提示\n      form: {}, //投递简历时传入的列表数据\n      list: {} //收藏职位时传入的列表数据\n    }\n  },\n  async created() {\n    this.loading = true\n    this.getByState()\n    this.loading = false\n  },\n  watch: {\n    /**\n     * 关键字搜索\n     */\n    searchKeyword(newVal) {\n      if (newVal) {\n        this.keyword = newVal\n        if (this.searchUser) {\n          this.keyword = `${newVal}`\n        }\n      } else {\n        this.keyword = ''\n        this.$refs.searchKeyword.clear()\n      }\n      this.searchPositionList()\n    },\n  },\n  methods: {\n    async getByState() {\n      const page = this.currentPage - 1\n      const count = this.pageCount\n      // 首页展示所有审核通过的职位\n      const positions = await Position.getByState(1, page, count)\n      this.tableData = positions.items\n      this.totalNums = positions.total\n    },\n    // 通过查询关键字分页搜索职位列表 \n    async searchPositionList() {\n      const page = this.currentPage - 1\n      const count = this.pageCount\n      const positions = await Position.getByKeyword(page, count, this.searchKeyword)\n      this.tableData = positions.items\n      this.totalNums = positions.total\n    },\n    // 清空检索\n    async backInit() {\n      this.searchKeyword = ''\n      this.keyword = ''\n      this.tableData = []\n      this.loading = true\n      this.getByState()\n      this.loading = false\n    },\n    /**\n     * 监听输入查询关键字\n     */\n    async onQueryChange(query) {\n      this.searchKeyword = query.trim()\n    },\n    // 切换table页\n    async handleCurrentChange(val) {\n      this.currentPage = val\n      this.loading = true\n      this.getByState()\n      this.loading = false\n    },\n    handleDetail(val) {\n      this.showDetail = true\n      this.detailPositionID = val.id\n    },\n    handleHot() {\n      this.showHot = true\n    },\n    rowClick() { },\n    detailClose() {\n      this.showDetail = false\n      this.getByState()\n    },\n    hotClose() {\n      this.showHot = false\n      this.showDetail = false\n      this.getByState()\n    },\n    // 投递简历\n    async handleDelivery(val) {\n      // 根据用户id和职位id判断用户是否已经投递过该职位，避免重复投递\n      const flag = await Application.getByPositionIdAndUserId(val.id, this.$store.getters.user.id)\n      if (flag === false) {\n        // 不能重复投递\n        this.$message.error(\"你已投递过该职位，不可重复投递\")\n      } else {\n        // 获取当前登录求职者的用户id\n        this.form.user_id = this.$store.getters.user.id\n        // 获取当前投递简历的职位id\n        this.form.position_id = val.id\n        // 根据用户id查询绑定的简历id\n        const temp = await Resume.getByUserId(this.$store.getters.user.id)\n        this.form.resume_id = temp.resume_id\n        console.log(temp)\n        // 根据职位id查询该职位所对应的hr_id\n        const result = await Position.getById(val.id)\n        this.form.hr_id = result.hr_id\n        this.form.company_id = val.company_id\n        // 调用创建申请的方法\n        const res = await Application.create(this.form)\n        if (res.code < window.MAX_SUCCESS_CODE) {\n          this.$message.success(`${res.message}`)\n        }\n      }\n    },\n    // 收藏职位\n    async handleCollect(val) {\n      // 获取当前登录求职者的用户id\n      this.list.user_id = this.$store.getters.user.id\n      // 获取当前收藏的职位id\n      this.list.position_id = val.id\n      // 调用添加收藏的方法\n      const res = await Favor.create(this.list)\n      if (res.code < window.MAX_SUCCESS_CODE) {\n        this.$message.success(`${res.message}`)\n      }\n    },\n  },\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.container {\n  padding: 0 30px;\n\n  .header {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n\n    .title {\n      height: 59px;\n      line-height: 59px;\n      color: $parent-title-color;\n      font-size: 25px;\n      font-weight: 500;\n      margin-left: 450px;\n    }\n  }\n\n  .search {\n    height: 52px;\n    width: 100%;\n    background: rgba(57, 99, 188, 0.1);\n    display: flex;\n    flex-direction: row;\n    justify-content: space-between;\n    margin-top: 24px;\n    margin-bottom: 24px;\n\n    .search-tip {\n      margin-left: 40px;\n      height: 52px;\n      line-height: 52px;\n      color: #354058;\n      font-size: 14px;\n\n      .search-keyword {\n        color: $theme;\n      }\n\n      .search-num {\n        color: #f4516c;\n      }\n    }\n\n    .search-back {\n      margin: 8px 20px;\n      height: 32px;\n      background: #f4516c;\n      border: none;\n      border-radius: 2px;\n      color: #fff;\n      padding: 0 13px;\n      font-size: 14px;\n      cursor: pointer;\n    }\n  }\n\n  .box {\n    display: flex;\n    justify-content: flex-start;\n    align-items: center;\n\n    .left {\n      margin-left: 280px;\n    }\n\n    .right {\n      height: 59px;\n      line-height: 59px;\n      color: $right-side-font-color;\n      font-size: 18px;\n      font-weight: 400;\n      margin-left: 50px;\n      cursor: pointer;\n    }\n  }\n\n  .pagination {\n    display: flex;\n    justify-content: flex-end;\n    margin: 30px;\n  }\n}\n</style>\n\n"]}]}